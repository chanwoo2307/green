{
  
    
        "post0": {
            "title": "Title",
            "content": "&#53685;&#44228;&#51204;&#49328; . 최규빈 교수님의 수업 . 화요일 2시 ~ 4시 , 목요일 4시 ~ 5시 수업임 . Jupyter = Julia + Python + R의 느낌 . 줄리아 터미널을 키고 키보드의 ]을 누르면 패키지를 다운받을 수 있는 상태가 됨 . ? 을 누르면 도움말을 알 수 있는 상태가 됨 . &#51460;&#47532;&#50500;&#47484; &#49892;&#54665;&#54644;&#48372;&#51088; . import Pluto 를 실행 | Pluto.run() 을 실행하고 조금 기다리면 자동으로 Pluto가 인테넷 창에서 실행된다. | new notebook을 통해 플루토 개발 환경을 이용한다. | Julia&#47484; jupyter notebook&#50640;&#49436; &#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . Julia를 실행한다. | using Pkg를 입력한다. | Pkg.add(&quot;IJulia&quot;)를 입력하면 된다. | 4.하지만 정상적으로 작동하지 않았다. 내 생각에는 ubunto로 주피터랩을 실행해서 그런것 같다고 생각이 되어 anaconda에서 주피터 노트북을 실행해보겠다. . anaconda에서 jupyter notebook을 실행해보았더니 Julia가 잘 들어와 있다. | 하지만 이 경우 ubuntu을 통해 jupyter notebook을 사용했을 때 설치하였던 R을 사용할 수가 없다. . Pluto&#50640;&#49436; &#54028;&#51068;&#50668;&#45716; &#48169;&#48277; . 줄리아에서 Pluto.run()을 통해 플루토를 실행한다 | 2. Open from file에서 내가 다운한 파일을 찾은 뒤에 open을 한다. . 3&#50900; 8&#51068; &#49688;&#50629;&#45236;&#50857; &#51221;&#47532; . 1. Pluto&#45716; &#51064;&#53552;&#47113;&#54000;&#48652; &#45432;&#53944;&#48513;&#51060;&#44256; jupyter lab&#51008; &#51064;&#53552;&#47113;&#54000;&#48652; &#45432;&#53944;&#48513;&#51060; &#50500;&#45768;&#45796;. . 인터렉티브하다는 것은 a=3, b=2, c=a+b라고 했을때 c=5일 것이다. 그 후에 a=5라고 바꾸었을 때 주피터랩은 c를 다시 실행헤도 c는 5이지만 플루토 환경에서는 a를 5로 바꾸는 순간 c가 7로 바뀐다. a=3 . b=2 . c=a+b c . 5 . a=5 . c . 5 . 2. &#54540;&#47336;&#53664;&#50640;&#49436; &#47560;&#53356;&#45796;&#50868;&#51012; &#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . 주피터랩에서는 esc+m을 누르면 마크다운을 사용할 수 있지만 플루토에서는 md&quot;~~~&quot; 를 입력해야 마크다운을 사용할 수 있다. . 3. &#54540;&#47336;&#53664;&#50640;&#49436;&#45716; &#50668;&#47084; &#51460;&#50640; &#53076;&#46300;&#47484; &#51089;&#49457;&#54616;&#45716; &#44163;&#51008; &#48520;&#54200;&#54616;&#45796;. . 예를 들어 c=a+b #line 1 c #line 2 라는 코드는 주피터랩에서는 사용할 수 있다.begin c=a+b #line 1 c #line 2 end 하지만 플루토에서는 begin과 end를 처음과 끝에 작성해야 쓸 수 있다. . 4.&#50948;&#51247;&#49324;&#50857;&#48277; . @bind number Radio([&quot;1학년&quot;, &quot;2학년&quot;, &quot;3학년&quot;, &quot;4학년&quot;]) . LoadError: UndefVarError: @bind not defined in expression starting at In[1]:1 Stacktrace: [1] top-level scope @ :0 [2] eval @ . boot.jl:373 [inlined] [3] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String) @ Base . loading.jl:1196 .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%ED%86%B5%EA%B3%84%EC%A0%84%EC%82%B0.html",
            "relUrl": "/2022/03/12/%ED%86%B5%EA%B3%84%EC%A0%84%EC%82%B0.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "&#53685;&#44228;&#51201; &#52628;&#47200; . 2022-1학기 수업내용을 정리할 예정임. . 월요일 11부터 1시,수요일 11 부터12시 수업 . 최혜미 교수님 수업, 수리통계학의 연장선이며 수리통계학 제 5판 교재를 계속 사용 . &#49688;&#47532; &#53685;&#44228;&#54617; &#48373;&#49845; . . 1&#51109; &#54869;&#47456;&#51060;&#47200; . 상호 배반 동일 표본공간 S상에 정의된 두 사건 A와 B의 공통부분이 없을 때, A 교집합 B가 공집합일 때 A와 B는 상호배반이라 한다. . {A cap b } .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%ED%86%B5%EA%B3%84%EC%A0%81-%EC%B6%94%EB%A1%A0.html",
            "relUrl": "/2022/03/12/%ED%86%B5%EA%B3%84%EC%A0%81-%EC%B6%94%EB%A1%A0.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "&#53685;&#44228;&#45936;&#51060;&#53552;&#48288;&#51060;&#49828; . 월요일 2시 ~ 4시 , 수요일 2~3시 강의이며 대면 강의임 . 안정용 교수님 수업이며 수업 자료는 enook을 사용함 .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%ED%86%B5%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4.html",
            "relUrl": "/2022/03/12/%ED%86%B5%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "&#51060;&#49328;&#49688;&#54617; . 월요일 1~2교시, 수요일 1교시 . 김지승 교수님 대면수업 . 대면 수업, 4/23? 6/17일 시험 예정 .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%EC%9D%B4%EC%82%B0%EC%88%98%ED%95%99.html",
            "relUrl": "/2022/03/12/%EC%9D%B4%EC%82%B0%EC%88%98%ED%95%99.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "&#50952;&#46020;&#50864;&#51592; &#54532;&#47196;&#44536;&#47000;&#48141; . 2022-1학기 수업내용을 정리할 예정임. . 컴퓨터 공학과 복수전공의 내용임 월요일 4 ~ 6시 수요일 4 ~ 5시 강의이지만 전면 비대면 강의임 줌수업이 아닌 유튜브를 통한 강의 시청 사용하는 언어 : c# . 사용하는 프레임워크 : WPF . 질문은 클라썸을 활용 . 모든 퀴즈는 수요일/ 금요일 23:55분까지 내야함 .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%EC%9C%88%EB%8F%84%EC%9A%B0%EC%A6%88-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.html",
            "relUrl": "/2022/03/12/%EC%9C%88%EB%8F%84%EC%9A%B0%EC%A6%88-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Title",
            "content": "&#45936;&#51060;&#53552; &#49884;&#44033;&#54868; . 2021-2학기 수업내용을 정리할 예정임. . 수업은 통계학과 최규빈 교수님의 수업임 .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94-%EC%97%B0%EC%8A%B5.html",
            "relUrl": "/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94-%EC%97%B0%EC%8A%B5.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "&#45936;&#51060;&#53552; &#47560;&#51060;&#45789; . 2022-1학기 수업내용을 정리할 예정임. . 수업은 통계학과 이명미 교수님의 수업 . 화요일 4 ~ 5시, 목요일 2시 ~ 4시 수업이며 대면을 통한 강의 .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A7%88%EC%9D%B4%EB%8B%9D.html",
            "relUrl": "/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A7%88%EC%9D%B4%EB%8B%9D.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": "LaTex &#49324;&#50857;&#54616;&#45716; &#48169;&#48277;(&#49688;&#49885; &#47564;&#46300;&#45716; &#48277;) . Jupyter notebook에서는 LaTex를 이용하여 수식을 표기할 수 있다. . 1. &#49688;&#49885; . 아래와 같은 수식을 작성하려면 $y=2x+1$ . markdown을 체크하고 $$y=2x+1$$ 입력한다 $y=2x+1$ | $$y=2x+1$$ | 1과 2의 차이는 수식의 $의 개수 차이이다 . 수식을 글과 함께 사용하고 싶으면 $ 수식 $ 을 입력해야하고 한줄로 분리해서 사용하고 싶으면 $$ 수식 $$을 입력하면 된다. 2. &#52392;&#51088; . 아래첨자 $a_1$ . $a_1$ 를 입력하면 된다. 아래첨자 $a_{ij}$ . $a_{ij}$ 를 입력하면 된다. 위첨자 $b^2$ . $b^2$ 를 입력하면 된다. . 위첨자 $b^{ij}$ . $b^{ij}$ 를 입력하면 된다. $c_1^2$ . $c_1^2$ 를 입력하면 된다. 3. &#45796;&#54637;&#49885; . $ y=x^3+2x^2+x+3 $ . $ y=x^3+2x^2+x+3 $를 입력하면 된다. 4. &#51228;&#44273;&#44540; . $ y= sqrt x$ . $y= sqrt x$ 를 입력하면 된다. 5. &#49340;&#44033;&#54632;&#49688; . $y= sin x$ , $y= cos x $ , $y= tan x $ . $y= sin x$ , $ y= cos x$ , $y= tan x $ 를 입력하면 된다. 6. &#48516;&#49688; . $y= frac{3}{4}$ . $y= frac{3}{4}$ 를 입력하면 된다. 7. &#49884;&#44536;&#47560; . $ y= sum_{k=1}^n a_k$ . $ y= sum_{k=1}^n a_k$ 를 입력하면 된다. . 8. &#44273;&#51665;&#54633; . $ y=prod_{k=1}^n a_k $ . $ y=prod_{k=1}^n a_k $를 입력하면 된다 . 9. &#54665;&#47148; . $$A= begin{bmatrix} 0 &amp; 1 &amp; 2 3 &amp; 4 &amp; 5 6 &amp; 7 &amp; 8 end{bmatrix} $$ $$A= begin{bmatrix} 0 &amp; 1 &amp; 2 3 &amp; 4 &amp; 5 6 &amp; 7 &amp; 8 end{bmatrix} $$ 이와 같이 입력하면 됨. 10.&#48120;&#48516; . $$ frac{df(x)}{dx} = lim_{h to0} frac{f(x+h)-f(x)}{h}$$ . $$ frac{df(x)}{dx} = lim_{h to0} frac{f(x+h)-f(x)}{h 이와 같이 입력하면 됨. 11.&#51201;&#48516; . $$ int_{0}^{1}{f(x)dx}$$ . $$ int_{0}^{1}{f(x)dx}$$ 이와 같이 입력하면 됨.",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/LaTex-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html",
            "relUrl": "/2022/03/12/LaTex-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Title",
            "content": "C&#50616;&#50612; &#48373;&#49845; . 동아리 활동을 하며 모르는 부분을 채워나갈 계획임 . &#44396;&#51312;&#52404; . typedef struct stdent{ // 변수의 정의 int num; char name[10]; char phone[12]; //010-xxxx-xxxx (번호는 11자 이지만) char형의 특성상 마지막은 비워주어야 하기 때문에 11자를 쓰기 위해서는 12칸이 필요 int kor; int eng; int math; } Student; void setStudent(Student *std){ (*std).kor=80; (*std).eng=70; (*std).math = 60; /* std-&gt;kor= 80; std-&gt;eng= 70; std-&gt;math= 60; */ 위와 같은 의미 int main(){ Student A; // struct student A d와 같은 의미 setStudent(&amp;A); printf(&quot;%d&quot; %d %d n&quot;, A.kor, A.eng, A.math);구조체 Student에는 num과 name kor, eng, math에 대한 자료형이 정의되어 있고 main함수를 해석하면 구조체 Student변수 A 또한num과 name kor, eng, math에 대한 자료형이 정의되어 있다. setStudent(&amp;A)에서 구조체 Student 변수 A의 주소가 std에 들어가고 *std가 A에 접근해서 A.kor, A.eng, A.math의 값을 바꾸게 된다. typedef struct stdent{ }Student; typedef (struct stdent)을 Student 으로 부르겠다라고 선언한 것임",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/C%EC%96%B8%EC%96%B4-%EB%B3%B5%EC%8A%B5.html",
            "relUrl": "/2022/03/12/C%EC%96%B8%EC%96%B4-%EB%B3%B5%EC%8A%B5.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "데이터시각화 기말고사 2번문제",
            "content": "import numpy as np import pandas as pd import warnings from IPython.display import HTML from pandas_datareader import data as pdr import json import folium import json import requests . df = pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/covid19_20211202.csv&#39;) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 0 누적(명) | 457,612 | 158,774 | 16,555 | 19,114 | 25,299 | 6,353 | 8,809 | 5,675 | 1,588 | 136,546 | 8,889 | 8,942 | 13,174 | 6,453 | 4,498 | 11,471 | 15,236 | 3,762 | 6,474 | . 1 2020-01-20 | 1 | - | - | - | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 2 2020-01-21 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 3 2020-01-22 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 4 2020-01-23 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3,925 | 1,673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1,090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3,308 | 1,393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3,032 | 1,186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5,123 | 2,222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1,582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5,266 | 2,268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1,495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 684 rows × 20 columns . df=df.iloc[1:,:] . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 1 2020-01-20 | 1 | - | - | - | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 2 2020-01-21 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 3 2020-01-22 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 4 2020-01-23 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 5 2020-01-24 | 1 | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3,925 | 1,673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1,090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3,308 | 1,393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3,032 | 1,186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5,123 | 2,222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1,582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5,266 | 2,268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1,495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 683 rows × 20 columns . df[&quot;계(명)&quot;] = df[&quot;계(명)&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True)#, 삭제 df[&quot;서울&quot;]=df[&quot;서울&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;부산&quot;]=df[&quot;부산&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;대구&quot;]=df[&quot;대구&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;인천&quot;]=df[&quot;인천&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;광주&quot;]=df[&quot;광주&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;대전&quot;]=df[&quot;대전&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;울산&quot;]=df[&quot;울산&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;세종&quot;]=df[&quot;세종&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;경기&quot;]=df[&quot;경기&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;강원&quot;]=df[&quot;강원&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;충북&quot;]=df[&quot;충북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;충남&quot;]=df[&quot;충남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;전북&quot;]=df[&quot;전북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;전남&quot;]=df[&quot;전남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;경북&quot;]=df[&quot;경북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;경남&quot;]=df[&quot;경남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;제주&quot;]=df[&quot;제주&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;검역&quot;]=df[&quot;검역&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) . &lt;ipython-input-7-252713c7230a&gt;:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;계(명)&#34;] = df[&#34;계(명)&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True)#, 삭제 &lt;ipython-input-7-252713c7230a&gt;:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;서울&#34;]=df[&#34;서울&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;부산&#34;]=df[&#34;부산&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:4: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;대구&#34;]=df[&#34;대구&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:5: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;인천&#34;]=df[&#34;인천&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;광주&#34;]=df[&#34;광주&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;대전&#34;]=df[&#34;대전&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:8: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;울산&#34;]=df[&#34;울산&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:9: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;세종&#34;]=df[&#34;세종&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:10: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;경기&#34;]=df[&#34;경기&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:11: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;강원&#34;]=df[&#34;강원&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:12: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;충북&#34;]=df[&#34;충북&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:13: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;충남&#34;]=df[&#34;충남&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:14: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;전북&#34;]=df[&#34;전북&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:15: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;전남&#34;]=df[&#34;전남&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:16: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;경북&#34;]=df[&#34;경북&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:17: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;경남&#34;]=df[&#34;경남&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:18: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;제주&#34;]=df[&#34;제주&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:19: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;검역&#34;]=df[&#34;검역&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 1 2020-01-20 | 1 | | | | 1 | | | | | | | | | | | | | | | . 2 2020-01-21 | 0 | | | | | | | | | | | | | | | | | | | . 3 2020-01-22 | 0 | | | | | | | | | | | | | | | | | | | . 4 2020-01-23 | 0 | | | | | | | | | | | | | | | | | | | . 5 2020-01-24 | 1 | 1 | | | | | | | | | | | | | | | | | | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3925 | 1673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3308 | 1393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3032 | 1186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5123 | 2222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5266 | 2268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 683 rows × 20 columns . def sep_yearmonths(x): x[&#39;month&#39;] = str(x[&#39;일자&#39;])[:-3] return x df = df.apply(sep_yearmonths,axis=1) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 ... 강원 충북 충남 전북 전남 경북 경남 제주 검역 month . 1 2020-01-20 | 1 | | | | 1 | | | | | ... | | | | | | | | | | 2020-01 | . 2 2020-01-21 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 3 2020-01-22 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 4 2020-01-23 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 5 2020-01-24 | 1 | 1 | | | | | | | | ... | | | | | | | | | | 2020-01 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3925 | 1673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | ... | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | 2021-11 | . 680 2021-11-29 | 3308 | 1393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | ... | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | 2021-11 | . 681 2021-11-30 | 3032 | 1186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | ... | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | 2021-11 | . 682 2021-12-01 | 5123 | 2222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | ... | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | 2021-12 | . 683 2021-12-02 | 5266 | 2268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | ... | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | 2021-12 | . 683 rows × 21 columns . df1=df.iloc[:,1:] . df1[&quot;계(명)&quot;]=pd.to_numeric(df1[&quot;계(명)&quot;]) df1[&quot;서울&quot;]=pd.to_numeric(df1[&quot;서울&quot;]) df1[&quot;부산&quot;]=pd.to_numeric(df1[&quot;부산&quot;]) df1[&quot;대구&quot;]=pd.to_numeric(df1[&quot;대구&quot;]) df1[&quot;인천&quot;]=pd.to_numeric(df1[&quot;인천&quot;]) df1[&quot;광주&quot;]=pd.to_numeric(df1[&quot;광주&quot;]) df1[&quot;대전&quot;]=pd.to_numeric(df1[&quot;대전&quot;]) df1[&quot;울산&quot;]=pd.to_numeric(df1[&quot;울산&quot;]) df1[&quot;세종&quot;]=pd.to_numeric(df1[&quot;세종&quot;]) df1[&quot;경기&quot;]=pd.to_numeric(df1[&quot;경기&quot;]) df1[&quot;강원&quot;]=pd.to_numeric(df1[&quot;강원&quot;]) df1[&quot;충북&quot;]=pd.to_numeric(df1[&quot;충북&quot;]) df1[&quot;충남&quot;]=pd.to_numeric(df1[&quot;충남&quot;]) df1[&quot;전북&quot;]=pd.to_numeric(df1[&quot;전북&quot;]) df1[&quot;전남&quot;]=pd.to_numeric(df1[&quot;전남&quot;]) df1[&quot;경북&quot;]=pd.to_numeric(df1[&quot;경북&quot;]) df1[&quot;경남&quot;]=pd.to_numeric(df1[&quot;경남&quot;]) df1[&quot;제주&quot;]=pd.to_numeric(df1[&quot;제주&quot;]) df1[&quot;검역&quot;]=pd.to_numeric(df1[&quot;검역&quot;]) . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 month . 1 1 | NaN | NaN | NaN | 1.0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 2 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 3 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 4 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 5 1 | 1.0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 3925 | 1673.0 | 148.0 | 106.0 | 278.0 | 52.0 | 53.0 | 4.0 | 5.0 | 1090.0 | 63.0 | 25.0 | 121.0 | 45.0 | 25.0 | 103.0 | 89.0 | 35.0 | 10.0 | 2021-11 | . 680 3308 | 1393.0 | 144.0 | 88.0 | 233.0 | 61.0 | 43.0 | 2.0 | 15.0 | 910.0 | 56.0 | 33.0 | 52.0 | 49.0 | 28.0 | 68.0 | 86.0 | 44.0 | 3.0 | 2021-11 | . 681 3032 | 1186.0 | 79.0 | 78.0 | 192.0 | 52.0 | 43.0 | 3.0 | 22.0 | 909.0 | 84.0 | 59.0 | 81.0 | 50.0 | 36.0 | 68.0 | 60.0 | 22.0 | 8.0 | 2021-11 | . 682 5123 | 2222.0 | 143.0 | 86.0 | 326.0 | 29.0 | 88.0 | 17.0 | 20.0 | 1582.0 | 105.0 | 48.0 | 96.0 | 50.0 | 40.0 | 97.0 | 127.0 | 27.0 | 20.0 | 2021-12 | . 683 5266 | 2268.0 | 158.0 | 70.0 | 355.0 | 39.0 | 166.0 | 18.0 | 8.0 | 1495.0 | 145.0 | 49.0 | 149.0 | 71.0 | 39.0 | 106.0 | 94.0 | 31.0 | 5.0 | 2021-12 | . 683 rows × 20 columns . df1=df1.fillna(0) . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 month . 1 1 | 0.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 2 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 3 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 4 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 5 1 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 3925 | 1673.0 | 148.0 | 106.0 | 278.0 | 52.0 | 53.0 | 4.0 | 5.0 | 1090.0 | 63.0 | 25.0 | 121.0 | 45.0 | 25.0 | 103.0 | 89.0 | 35.0 | 10.0 | 2021-11 | . 680 3308 | 1393.0 | 144.0 | 88.0 | 233.0 | 61.0 | 43.0 | 2.0 | 15.0 | 910.0 | 56.0 | 33.0 | 52.0 | 49.0 | 28.0 | 68.0 | 86.0 | 44.0 | 3.0 | 2021-11 | . 681 3032 | 1186.0 | 79.0 | 78.0 | 192.0 | 52.0 | 43.0 | 3.0 | 22.0 | 909.0 | 84.0 | 59.0 | 81.0 | 50.0 | 36.0 | 68.0 | 60.0 | 22.0 | 8.0 | 2021-11 | . 682 5123 | 2222.0 | 143.0 | 86.0 | 326.0 | 29.0 | 88.0 | 17.0 | 20.0 | 1582.0 | 105.0 | 48.0 | 96.0 | 50.0 | 40.0 | 97.0 | 127.0 | 27.0 | 20.0 | 2021-12 | . 683 5266 | 2268.0 | 158.0 | 70.0 | 355.0 | 39.0 | 166.0 | 18.0 | 8.0 | 1495.0 | 145.0 | 49.0 | 149.0 | 71.0 | 39.0 | 106.0 | 94.0 | 31.0 | 5.0 | 2021-12 | . 683 rows × 20 columns . df1=df1.groupby(by=&#39;month&#39;).agg(&#39;sum&#39;) . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . month . 2020-01 11 | 7.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2020-02 2920 | 67.0 | 75.0 | 2055.0 | 5.0 | 9.0 | 13.0 | 17.0 | 1.0 | 74.0 | 7.0 | 10.0 | 48.0 | 4.0 | 2.0 | 472.0 | 59.0 | 2.0 | 0.0 | . 2020-03 6855 | 376.0 | 44.0 | 4629.0 | 58.0 | 11.0 | 23.0 | 22.0 | 45.0 | 400.0 | 29.0 | 34.0 | 80.0 | 8.0 | 7.0 | 828.0 | 37.0 | 7.0 | 217.0 | . 2020-04 979 | 183.0 | 18.0 | 168.0 | 29.0 | 10.0 | 4.0 | 4.0 | 0.0 | 200.0 | 17.0 | 1.0 | 15.0 | 5.0 | 6.0 | 65.0 | 21.0 | 4.0 | 229.0 | . 2020-05 703 | 228.0 | 10.0 | 31.0 | 113.0 | 2.0 | 6.0 | 9.0 | 1.0 | 164.0 | 4.0 | 15.0 | 3.0 | 3.0 | 4.0 | 14.0 | 6.0 | 2.0 | 88.0 | . 2020-06 1331 | 451.0 | 7.0 | 23.0 | 135.0 | 12.0 | 71.0 | 3.0 | 3.0 | 367.0 | 8.0 | 4.0 | 21.0 | 6.0 | 5.0 | 10.0 | 11.0 | 4.0 | 190.0 | . 2020-07 1506 | 288.0 | 17.0 | 34.0 | 42.0 | 160.0 | 49.0 | 4.0 | 0.0 | 339.0 | 9.0 | 9.0 | 23.0 | 12.0 | 14.0 | 12.0 | 25.0 | 7.0 | 462.0 | . 2020-08 5641 | 2268.0 | 130.0 | 107.0 | 333.0 | 170.0 | 90.0 | 30.0 | 17.0 | 1714.0 | 115.0 | 55.0 | 142.0 | 48.0 | 104.0 | 54.0 | 77.0 | 19.0 | 168.0 | . 2020-09 3865 | 1425.0 | 120.0 | 85.0 | 200.0 | 121.0 | 104.0 | 58.0 | 9.0 | 1123.0 | 35.0 | 43.0 | 152.0 | 41.0 | 27.0 | 96.0 | 55.0 | 14.0 | 157.0 | . 2020-10 2700 | 718.0 | 171.0 | 42.0 | 129.0 | 16.0 | 82.0 | 16.0 | 6.0 | 1020.0 | 55.0 | 18.0 | 57.0 | 38.0 | 16.0 | 36.0 | 25.0 | 0.0 | 255.0 | . 2020-11 7688 | 2800.0 | 217.0 | 58.0 | 364.0 | 185.0 | 52.0 | 35.0 | 18.0 | 1874.0 | 373.0 | 138.0 | 358.0 | 168.0 | 239.0 | 117.0 | 309.0 | 21.0 | 362.0 | . 2020-12 26527 | 10184.0 | 1058.0 | 569.0 | 1430.0 | 385.0 | 351.0 | 475.0 | 49.0 | 7173.0 | 555.0 | 836.0 | 754.0 | 503.0 | 136.0 | 720.0 | 700.0 | 336.0 | 313.0 | . 2021-01 17471 | 5160.0 | 889.0 | 507.0 | 974.0 | 702.0 | 252.0 | 264.0 | 47.0 | 5353.0 | 488.0 | 411.0 | 363.0 | 202.0 | 189.0 | 593.0 | 686.0 | 106.0 | 285.0 | . 2021-02 11467 | 4080.0 | 466.0 | 315.0 | 618.0 | 301.0 | 93.0 | 76.0 | 30.0 | 3747.0 | 169.0 | 182.0 | 428.0 | 152.0 | 110.0 | 236.0 | 172.0 | 48.0 | 244.0 | . 2021-03 13415 | 3794.0 | 583.0 | 304.0 | 627.0 | 125.0 | 96.0 | 141.0 | 44.0 | 5029.0 | 466.0 | 434.0 | 187.0 | 260.0 | 54.0 | 251.0 | 777.0 | 55.0 | 188.0 | . 2021-04 18927 | 5807.0 | 1244.0 | 424.0 | 607.0 | 200.0 | 444.0 | 725.0 | 87.0 | 5617.0 | 354.0 | 438.0 | 402.0 | 485.0 | 140.0 | 606.0 | 955.0 | 82.0 | 310.0 | . 2021-05 18331 | 6078.0 | 619.0 | 565.0 | 533.0 | 396.0 | 348.0 | 699.0 | 123.0 | 4885.0 | 501.0 | 315.0 | 505.0 | 289.0 | 410.0 | 582.0 | 784.0 | 323.0 | 376.0 | . 2021-06 16623 | 6072.0 | 553.0 | 682.0 | 569.0 | 132.0 | 573.0 | 246.0 | 80.0 | 4978.0 | 374.0 | 363.0 | 266.0 | 139.0 | 185.0 | 257.0 | 548.0 | 234.0 | 372.0 | . 2021-07 41374 | 14364.0 | 1985.0 | 1071.0 | 2293.0 | 462.0 | 1538.0 | 382.0 | 176.0 | 11721.0 | 934.0 | 544.0 | 1142.0 | 403.0 | 387.0 | 507.0 | 1956.0 | 468.0 | 1041.0 | . 2021-08 53077 | 15001.0 | 3180.0 | 1977.0 | 2767.0 | 654.0 | 1458.0 | 969.0 | 257.0 | 15298.0 | 967.0 | 1302.0 | 1991.0 | 821.0 | 565.0 | 1644.0 | 2777.0 | 870.0 | 579.0 | . 2021-09 59860 | 21134.0 | 1335.0 | 1853.0 | 3975.0 | 936.0 | 1338.0 | 990.0 | 246.0 | 19046.0 | 977.0 | 1192.0 | 2196.0 | 927.0 | 484.0 | 1223.0 | 1480.0 | 273.0 | 255.0 | . 2021-10 53421 | 19107.0 | 1190.0 | 1643.0 | 3571.0 | 382.0 | 547.0 | 256.0 | 126.0 | 18333.0 | 762.0 | 1556.0 | 1467.0 | 672.0 | 459.0 | 1386.0 | 1548.0 | 225.0 | 191.0 | . 2021-11 82531 | 34692.0 | 2343.0 | 1816.0 | 5245.0 | 914.0 | 1023.0 | 219.0 | 195.0 | 25012.0 | 1440.0 | 945.0 | 2329.0 | 1145.0 | 876.0 | 1559.0 | 2007.0 | 604.0 | 167.0 | . 2021-12 10389 | 4490.0 | 301.0 | 156.0 | 681.0 | 68.0 | 254.0 | 35.0 | 28.0 | 3077.0 | 250.0 | 97.0 | 245.0 | 121.0 | 79.0 | 203.0 | 221.0 | 58.0 | 25.0 | . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . month . 2020-01 11 | 7.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2020-02 2920 | 67.0 | 75.0 | 2055.0 | 5.0 | 9.0 | 13.0 | 17.0 | 1.0 | 74.0 | 7.0 | 10.0 | 48.0 | 4.0 | 2.0 | 472.0 | 59.0 | 2.0 | 0.0 | . 2020-03 6855 | 376.0 | 44.0 | 4629.0 | 58.0 | 11.0 | 23.0 | 22.0 | 45.0 | 400.0 | 29.0 | 34.0 | 80.0 | 8.0 | 7.0 | 828.0 | 37.0 | 7.0 | 217.0 | . 2020-04 979 | 183.0 | 18.0 | 168.0 | 29.0 | 10.0 | 4.0 | 4.0 | 0.0 | 200.0 | 17.0 | 1.0 | 15.0 | 5.0 | 6.0 | 65.0 | 21.0 | 4.0 | 229.0 | . 2020-05 703 | 228.0 | 10.0 | 31.0 | 113.0 | 2.0 | 6.0 | 9.0 | 1.0 | 164.0 | 4.0 | 15.0 | 3.0 | 3.0 | 4.0 | 14.0 | 6.0 | 2.0 | 88.0 | . 2020-06 1331 | 451.0 | 7.0 | 23.0 | 135.0 | 12.0 | 71.0 | 3.0 | 3.0 | 367.0 | 8.0 | 4.0 | 21.0 | 6.0 | 5.0 | 10.0 | 11.0 | 4.0 | 190.0 | . 2020-07 1506 | 288.0 | 17.0 | 34.0 | 42.0 | 160.0 | 49.0 | 4.0 | 0.0 | 339.0 | 9.0 | 9.0 | 23.0 | 12.0 | 14.0 | 12.0 | 25.0 | 7.0 | 462.0 | . 2020-08 5641 | 2268.0 | 130.0 | 107.0 | 333.0 | 170.0 | 90.0 | 30.0 | 17.0 | 1714.0 | 115.0 | 55.0 | 142.0 | 48.0 | 104.0 | 54.0 | 77.0 | 19.0 | 168.0 | . 2020-09 3865 | 1425.0 | 120.0 | 85.0 | 200.0 | 121.0 | 104.0 | 58.0 | 9.0 | 1123.0 | 35.0 | 43.0 | 152.0 | 41.0 | 27.0 | 96.0 | 55.0 | 14.0 | 157.0 | . 2020-10 2700 | 718.0 | 171.0 | 42.0 | 129.0 | 16.0 | 82.0 | 16.0 | 6.0 | 1020.0 | 55.0 | 18.0 | 57.0 | 38.0 | 16.0 | 36.0 | 25.0 | 0.0 | 255.0 | . 2020-11 7688 | 2800.0 | 217.0 | 58.0 | 364.0 | 185.0 | 52.0 | 35.0 | 18.0 | 1874.0 | 373.0 | 138.0 | 358.0 | 168.0 | 239.0 | 117.0 | 309.0 | 21.0 | 362.0 | . 2020-12 26527 | 10184.0 | 1058.0 | 569.0 | 1430.0 | 385.0 | 351.0 | 475.0 | 49.0 | 7173.0 | 555.0 | 836.0 | 754.0 | 503.0 | 136.0 | 720.0 | 700.0 | 336.0 | 313.0 | . 2021-01 17471 | 5160.0 | 889.0 | 507.0 | 974.0 | 702.0 | 252.0 | 264.0 | 47.0 | 5353.0 | 488.0 | 411.0 | 363.0 | 202.0 | 189.0 | 593.0 | 686.0 | 106.0 | 285.0 | . 2021-02 11467 | 4080.0 | 466.0 | 315.0 | 618.0 | 301.0 | 93.0 | 76.0 | 30.0 | 3747.0 | 169.0 | 182.0 | 428.0 | 152.0 | 110.0 | 236.0 | 172.0 | 48.0 | 244.0 | . 2021-03 13415 | 3794.0 | 583.0 | 304.0 | 627.0 | 125.0 | 96.0 | 141.0 | 44.0 | 5029.0 | 466.0 | 434.0 | 187.0 | 260.0 | 54.0 | 251.0 | 777.0 | 55.0 | 188.0 | . 2021-04 18927 | 5807.0 | 1244.0 | 424.0 | 607.0 | 200.0 | 444.0 | 725.0 | 87.0 | 5617.0 | 354.0 | 438.0 | 402.0 | 485.0 | 140.0 | 606.0 | 955.0 | 82.0 | 310.0 | . 2021-05 18331 | 6078.0 | 619.0 | 565.0 | 533.0 | 396.0 | 348.0 | 699.0 | 123.0 | 4885.0 | 501.0 | 315.0 | 505.0 | 289.0 | 410.0 | 582.0 | 784.0 | 323.0 | 376.0 | . 2021-06 16623 | 6072.0 | 553.0 | 682.0 | 569.0 | 132.0 | 573.0 | 246.0 | 80.0 | 4978.0 | 374.0 | 363.0 | 266.0 | 139.0 | 185.0 | 257.0 | 548.0 | 234.0 | 372.0 | . 2021-07 41374 | 14364.0 | 1985.0 | 1071.0 | 2293.0 | 462.0 | 1538.0 | 382.0 | 176.0 | 11721.0 | 934.0 | 544.0 | 1142.0 | 403.0 | 387.0 | 507.0 | 1956.0 | 468.0 | 1041.0 | . 2021-08 53077 | 15001.0 | 3180.0 | 1977.0 | 2767.0 | 654.0 | 1458.0 | 969.0 | 257.0 | 15298.0 | 967.0 | 1302.0 | 1991.0 | 821.0 | 565.0 | 1644.0 | 2777.0 | 870.0 | 579.0 | . 2021-09 59860 | 21134.0 | 1335.0 | 1853.0 | 3975.0 | 936.0 | 1338.0 | 990.0 | 246.0 | 19046.0 | 977.0 | 1192.0 | 2196.0 | 927.0 | 484.0 | 1223.0 | 1480.0 | 273.0 | 255.0 | . 2021-10 53421 | 19107.0 | 1190.0 | 1643.0 | 3571.0 | 382.0 | 547.0 | 256.0 | 126.0 | 18333.0 | 762.0 | 1556.0 | 1467.0 | 672.0 | 459.0 | 1386.0 | 1548.0 | 225.0 | 191.0 | . 2021-11 82531 | 34692.0 | 2343.0 | 1816.0 | 5245.0 | 914.0 | 1023.0 | 219.0 | 195.0 | 25012.0 | 1440.0 | 945.0 | 2329.0 | 1145.0 | 876.0 | 1559.0 | 2007.0 | 604.0 | 167.0 | . 2021-12 10389 | 4490.0 | 301.0 | 156.0 | 681.0 | 68.0 | 254.0 | 35.0 | 28.0 | 3077.0 | 250.0 | 97.0 | 245.0 | 121.0 | 79.0 | 203.0 | 221.0 | 58.0 | 25.0 | . df1=df1.iloc[12:22,1:18] . df1 . 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 . month . 2021-01 5160.0 | 889.0 | 507.0 | 974.0 | 702.0 | 252.0 | 264.0 | 47.0 | 5353.0 | 488.0 | 411.0 | 363.0 | 202.0 | 189.0 | 593.0 | 686.0 | 106.0 | . 2021-02 4080.0 | 466.0 | 315.0 | 618.0 | 301.0 | 93.0 | 76.0 | 30.0 | 3747.0 | 169.0 | 182.0 | 428.0 | 152.0 | 110.0 | 236.0 | 172.0 | 48.0 | . 2021-03 3794.0 | 583.0 | 304.0 | 627.0 | 125.0 | 96.0 | 141.0 | 44.0 | 5029.0 | 466.0 | 434.0 | 187.0 | 260.0 | 54.0 | 251.0 | 777.0 | 55.0 | . 2021-04 5807.0 | 1244.0 | 424.0 | 607.0 | 200.0 | 444.0 | 725.0 | 87.0 | 5617.0 | 354.0 | 438.0 | 402.0 | 485.0 | 140.0 | 606.0 | 955.0 | 82.0 | . 2021-05 6078.0 | 619.0 | 565.0 | 533.0 | 396.0 | 348.0 | 699.0 | 123.0 | 4885.0 | 501.0 | 315.0 | 505.0 | 289.0 | 410.0 | 582.0 | 784.0 | 323.0 | . 2021-06 6072.0 | 553.0 | 682.0 | 569.0 | 132.0 | 573.0 | 246.0 | 80.0 | 4978.0 | 374.0 | 363.0 | 266.0 | 139.0 | 185.0 | 257.0 | 548.0 | 234.0 | . 2021-07 14364.0 | 1985.0 | 1071.0 | 2293.0 | 462.0 | 1538.0 | 382.0 | 176.0 | 11721.0 | 934.0 | 544.0 | 1142.0 | 403.0 | 387.0 | 507.0 | 1956.0 | 468.0 | . 2021-08 15001.0 | 3180.0 | 1977.0 | 2767.0 | 654.0 | 1458.0 | 969.0 | 257.0 | 15298.0 | 967.0 | 1302.0 | 1991.0 | 821.0 | 565.0 | 1644.0 | 2777.0 | 870.0 | . 2021-09 21134.0 | 1335.0 | 1853.0 | 3975.0 | 936.0 | 1338.0 | 990.0 | 246.0 | 19046.0 | 977.0 | 1192.0 | 2196.0 | 927.0 | 484.0 | 1223.0 | 1480.0 | 273.0 | . 2021-10 19107.0 | 1190.0 | 1643.0 | 3571.0 | 382.0 | 547.0 | 256.0 | 126.0 | 18333.0 | 762.0 | 1556.0 | 1467.0 | 672.0 | 459.0 | 1386.0 | 1548.0 | 225.0 | . df2=df1.reset_index().melt(id_vars=&#39;month&#39;) . df2.head(30) . month variable value . 0 2021-01 | 서울 | 5160.0 | . 1 2021-02 | 서울 | 4080.0 | . 2 2021-03 | 서울 | 3794.0 | . 3 2021-04 | 서울 | 5807.0 | . 4 2021-05 | 서울 | 6078.0 | . 5 2021-06 | 서울 | 6072.0 | . 6 2021-07 | 서울 | 14364.0 | . 7 2021-08 | 서울 | 15001.0 | . 8 2021-09 | 서울 | 21134.0 | . 9 2021-10 | 서울 | 19107.0 | . 10 2021-01 | 부산 | 889.0 | . 11 2021-02 | 부산 | 466.0 | . 12 2021-03 | 부산 | 583.0 | . 13 2021-04 | 부산 | 1244.0 | . 14 2021-05 | 부산 | 619.0 | . 15 2021-06 | 부산 | 553.0 | . 16 2021-07 | 부산 | 1985.0 | . 17 2021-08 | 부산 | 3180.0 | . 18 2021-09 | 부산 | 1335.0 | . 19 2021-10 | 부산 | 1190.0 | . 20 2021-01 | 대구 | 507.0 | . 21 2021-02 | 대구 | 315.0 | . 22 2021-03 | 대구 | 304.0 | . 23 2021-04 | 대구 | 424.0 | . 24 2021-05 | 대구 | 565.0 | . 25 2021-06 | 대구 | 682.0 | . 26 2021-07 | 대구 | 1071.0 | . 27 2021-08 | 대구 | 1977.0 | . 28 2021-09 | 대구 | 1853.0 | . 29 2021-10 | 대구 | 1643.0 | . total=pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/2021-11-22-prov.csv&#39;) . total . 행정구역(시군구)별 총인구수 (명) . 0 서울특별시 | 9532428 | . 1 부산광역시 | 3356311 | . 2 대구광역시 | 2390721 | . 3 인천광역시 | 2945009 | . 4 광주광역시 | 1442454 | . 5 대전광역시 | 1454228 | . 6 울산광역시 | 1122566 | . 7 세종특별자치시 | 368276 | . 8 경기도 | 13549577 | . 9 강원도 | 1537717 | . 10 충청북도 | 1596948 | . 11 충청남도 | 2118977 | . 12 전라북도 | 1789770 | . 13 전라남도 | 1834653 | . 14 경상북도 | 2627925 | . 15 경상남도 | 3318161 | . 16 제주특별자치도 | 676569 | . city=[&#39;서울특별시&#39;]*10+[&#39;부산광역시&#39;]*10+[&#39;대구광역시&#39;]*10+[&#39;인천광역시&#39;]*10+[&#39;광주광역시&#39;]*10+[&#39;대전광역시&#39;]*10+[&#39;울산광역시&#39;]*10+[&#39;세종특별자치시&#39;]*10+[&#39;경기도&#39;]*10+[&#39;강원도&#39;]*10+[&#39;충청북도&#39;]*10+[&#39;충청남도&#39;]*10+[&#39;전라북도&#39;]*10+[&#39;전라남도&#39;]*10+[&#39;경상북도&#39;]*10+[&#39;경상남도&#39;]*10+[&#39;제주특별자치도&#39;]*10 count=[&#39;9532428&#39;]*10+[&#39;3356311&#39;]*10+[&#39;2390721&#39;]*10+[&#39;2945009&#39;]*10+[&#39;1442454&#39;]*10+[&#39;1454228&#39;]*10+[&#39;1122566&#39;]*10+[&#39;368276&#39;]*10+[&#39;13549577&#39;]*10+[&#39;1537717&#39;]*10+[&#39;1596948&#39;]*10+[&#39;2118977&#39;]*10+[&#39;1789770&#39;]*10+[&#39;1834653&#39;]*10+[&#39;2627925&#39;]*10+[&#39;3318161&#39;]*10+[&#39;676569&#39;]*10 ttotal=pd.DataFrame({&#39;행정구역(시군구)별&#39;:city,&#39;총인구수(명)&#39;:count}) . ttotal . 행정구역(시군구)별 총인구수(명) . 0 서울특별시 | 9532428 | . 1 서울특별시 | 9532428 | . 2 서울특별시 | 9532428 | . 3 서울특별시 | 9532428 | . 4 서울특별시 | 9532428 | . ... ... | ... | . 165 제주특별자치도 | 676569 | . 166 제주특별자치도 | 676569 | . 167 제주특별자치도 | 676569 | . 168 제주특별자치도 | 676569 | . 169 제주특별자치도 | 676569 | . 170 rows × 2 columns . pd.concat([df2,ttotal],axis=1) . month variable value 행정구역(시군구)별 총인구수(명) . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | . ... ... | ... | ... | ... | ... | . 165 2021-06 | 제주 | 234.0 | 제주특별자치도 | 676569 | . 166 2021-07 | 제주 | 468.0 | 제주특별자치도 | 676569 | . 167 2021-08 | 제주 | 870.0 | 제주특별자치도 | 676569 | . 168 2021-09 | 제주 | 273.0 | 제주특별자치도 | 676569 | . 169 2021-10 | 제주 | 225.0 | 제주특별자치도 | 676569 | . 170 rows × 5 columns . problem2_total=pd.concat([df2,ttotal],axis=1) . problem2_total[&quot;value&quot;]=pd.to_numeric(problem2_total[&quot;value&quot;]) problem2_total[&quot;총인구수(명)&quot;]=pd.to_numeric(problem2_total[&quot;총인구수(명)&quot;]) . problem2_total=problem2_total.assign(prob=list(map(lambda x,y: x/y,problem2_total.iloc[:,2] ,problem2_total.iloc[:,4]))) . problem2_total . month variable value 행정구역(시군구)별 총인구수(명) prob . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | 0.000541 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | 0.000428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | 0.000398 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | 0.000609 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | 0.000638 | . ... ... | ... | ... | ... | ... | ... | . 165 2021-06 | 제주 | 234.0 | 제주특별자치도 | 676569 | 0.000346 | . 166 2021-07 | 제주 | 468.0 | 제주특별자치도 | 676569 | 0.000692 | . 167 2021-08 | 제주 | 870.0 | 제주특별자치도 | 676569 | 0.001286 | . 168 2021-09 | 제주 | 273.0 | 제주특별자치도 | 676569 | 0.000404 | . 169 2021-10 | 제주 | 225.0 | 제주특별자치도 | 676569 | 0.000333 | . 170 rows × 6 columns . problem2_total[&quot;prob&quot;]=pd.to_numeric(problem2_total[&quot;prob&quot;]) . problem2_total[&#39;prob&#39;].idxmax() #prob의 22번째 값이 가장 크다. . 8 . problem2_total.head(9) . month variable value 행정구역(시군구)별 총인구수(명) prob . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | 0.000541 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | 0.000428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | 0.000398 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | 0.000609 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | 0.000638 | . 5 2021-06 | 서울 | 6072.0 | 서울특별시 | 9532428 | 0.000637 | . 6 2021-07 | 서울 | 14364.0 | 서울특별시 | 9532428 | 0.001507 | . 7 2021-08 | 서울 | 15001.0 | 서울특별시 | 9532428 | 0.001574 | . 8 2021-09 | 서울 | 21134.0 | 서울특별시 | 9532428 | 0.002217 | . problem2_total[&#39;prob&#39;].max() . 0.002217063690384024 . problem2_total . month variable value 행정구역(시군구)별 총인구수(명) prob . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | 0.000541 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | 0.000428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | 0.000398 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | 0.000609 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | 0.000638 | . ... ... | ... | ... | ... | ... | ... | . 165 2021-06 | 제주 | 234.0 | 제주특별자치도 | 676569 | 0.000346 | . 166 2021-07 | 제주 | 468.0 | 제주특별자치도 | 676569 | 0.000692 | . 167 2021-08 | 제주 | 870.0 | 제주특별자치도 | 676569 | 0.001286 | . 168 2021-09 | 제주 | 273.0 | 제주특별자치도 | 676569 | 0.000404 | . 169 2021-10 | 제주 | 225.0 | 제주특별자치도 | 676569 | 0.000333 | . 170 rows × 6 columns . global_distriction_jsonurl=&#39;https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json&#39; . global_dict = json.loads(requests.get(global_distriction_jsonurl).text) . [global_dict[&#39;features&#39;][i][&#39;properties&#39;][&#39;name&#39;] for i in range(17)] . [&#39;서울특별시&#39;, &#39;부산광역시&#39;, &#39;대구광역시&#39;, &#39;인천광역시&#39;, &#39;광주광역시&#39;, &#39;대전광역시&#39;, &#39;울산광역시&#39;, &#39;세종특별자치시&#39;, &#39;경기도&#39;, &#39;강원도&#39;, &#39;충청북도&#39;, &#39;충청남도&#39;, &#39;전라북도&#39;, &#39;전라남도&#39;, &#39;경상북도&#39;, &#39;경상남도&#39;, &#39;제주특별자치도&#39;] . import plotly.express as px ### plotly 로 시각화 from IPython.display import HTML fig=px.choropleth_mapbox(problem2_total, geojson=global_dict, color=&quot;prob&quot;, locations=&quot;행정구역(시군구)별&quot; , animation_frame=&#39;month&#39;, featureidkey=&quot;properties.name&quot;, center={&quot;lat&quot;: 36, &quot;lon&quot;: 128}, mapbox_style=&quot;carto-positron&quot;, range_color=(0,problem2_total.iloc[:,5].max()), height=1200, zoom=6.5) fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) _html=fig.to_html(include_mathjax=False, config=dict({&#39;scrollZoom&#39;:False})) #HTML(_html) . .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-2%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "relUrl": "/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-2%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "데이터 시각화 1번 문제",
            "content": "import numpy as np import pandas as pd import warnings from IPython.display import HTML from pandas_datareader import data as pdr import json import folium import json import requests . . covid19=pd.read_html(&#39;https://ncv.kdca.go.kr/mainStatus.es?mid=a11702000000&#39;,encoding=&#39;utf-8&#39;)[1] . covid19 . 구분 1차접종 2차접종 3차(부스터)접종 . 구분 당일 실적 당일 누계 당일 실적 당일 누계 당일 실적 당일 누계 . 0 합계 | 1690 | 42678737 | 1963 | 41341888 | 3650 | 3956401 | . 1 서울 | 346 | 7945695 | 400 | 7723156 | 961 | 731310 | . 2 부산 | 85 | 2727591 | 92 | 2639817 | 157 | 234329 | . 3 대구 | 35 | 1898227 | 36 | 1835971 | 52 | 146256 | . 4 인천 | 142 | 2434931 | 211 | 2356312 | 227 | 203496 | . 5 광주 | 16 | 1191925 | 22 | 1148110 | 53 | 118291 | . 6 대전 | 40 | 1175320 | 28 | 1136378 | 39 | 102857 | . 7 울산 | 16 | 909707 | 20 | 882496 | 27 | 64513 | . 8 세종 | 20 | 272853 | 6 | 262759 | 19 | 24207 | . 9 경기 | 734 | 11173053 | 871 | 10835028 | 1660 | 974644 | . 10 강원 | 22 | 1280951 | 31 | 1240851 | 29 | 130066 | . 11 충북 | 28 | 1353724 | 32 | 1311624 | 72 | 137055 | . 12 충남 | 33 | 1792133 | 62 | 1731542 | 91 | 187208 | . 13 전북 | 37 | 1516390 | 34 | 1465954 | 65 | 175752 | . 14 전남 | 13 | 1577132 | 29 | 1525475 | 41 | 217218 | . 15 경북 | 24 | 2162570 | 26 | 2091760 | 27 | 212036 | . 16 경남 | 66 | 2716019 | 43 | 2623264 | 84 | 249670 | . 17 제주 | 33 | 550516 | 20 | 531391 | 46 | 47493 | . covid19_1=covid19[[&#39;2차접종&#39;]].iloc[1:,1:].reset_index() . covid19_1 . index 2차접종 . 당일 누계 . 0 1 | 7723156 | . 1 2 | 2639817 | . 2 3 | 1835971 | . 3 4 | 2356312 | . 4 5 | 1148110 | . 5 6 | 1136378 | . 6 7 | 882496 | . 7 8 | 262759 | . 8 9 | 10835028 | . 9 10 | 1240851 | . 10 11 | 1311624 | . 11 12 | 1731542 | . 12 13 | 1465954 | . 13 14 | 1525475 | . 14 15 | 2091760 | . 15 16 | 2623264 | . 16 17 | 531391 | . global_distriction_jsonurl=&#39;https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json&#39; . global_dict = json.loads(requests.get(global_distriction_jsonurl).text) . [global_dict[&#39;features&#39;][i][&#39;properties&#39;][&#39;name&#39;] for i in range(17)] . [&#39;서울특별시&#39;, &#39;부산광역시&#39;, &#39;대구광역시&#39;, &#39;인천광역시&#39;, &#39;광주광역시&#39;, &#39;대전광역시&#39;, &#39;울산광역시&#39;, &#39;세종특별자치시&#39;, &#39;경기도&#39;, &#39;강원도&#39;, &#39;충청북도&#39;, &#39;충청남도&#39;, &#39;전라북도&#39;, &#39;전라남도&#39;, &#39;경상북도&#39;, &#39;경상남도&#39;, &#39;제주특별자치도&#39;] . second=pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/2021-11-22-prov.csv&#39;) . second . 행정구역(시군구)별 총인구수 (명) . 0 서울특별시 | 9532428 | . 1 부산광역시 | 3356311 | . 2 대구광역시 | 2390721 | . 3 인천광역시 | 2945009 | . 4 광주광역시 | 1442454 | . 5 대전광역시 | 1454228 | . 6 울산광역시 | 1122566 | . 7 세종특별자치시 | 368276 | . 8 경기도 | 13549577 | . 9 강원도 | 1537717 | . 10 충청북도 | 1596948 | . 11 충청남도 | 2118977 | . 12 전라북도 | 1789770 | . 13 전라남도 | 1834653 | . 14 경상북도 | 2627925 | . 15 경상남도 | 3318161 | . 16 제주특별자치도 | 676569 | . covid19_total=pd.concat([second,covid19_1],axis=1) . covid19_total . 행정구역(시군구)별 총인구수 (명) (index, ) (2차접종, 당일 누계) . 0 서울특별시 | 9532428 | 1 | 7723156 | . 1 부산광역시 | 3356311 | 2 | 2639817 | . 2 대구광역시 | 2390721 | 3 | 1835971 | . 3 인천광역시 | 2945009 | 4 | 2356312 | . 4 광주광역시 | 1442454 | 5 | 1148110 | . 5 대전광역시 | 1454228 | 6 | 1136378 | . 6 울산광역시 | 1122566 | 7 | 882496 | . 7 세종특별자치시 | 368276 | 8 | 262759 | . 8 경기도 | 13549577 | 9 | 10835028 | . 9 강원도 | 1537717 | 10 | 1240851 | . 10 충청북도 | 1596948 | 11 | 1311624 | . 11 충청남도 | 2118977 | 12 | 1731542 | . 12 전라북도 | 1789770 | 13 | 1465954 | . 13 전라남도 | 1834653 | 14 | 1525475 | . 14 경상북도 | 2627925 | 15 | 2091760 | . 15 경상남도 | 3318161 | 16 | 2623264 | . 16 제주특별자치도 | 676569 | 17 | 531391 | . q=covid19_total.iloc[:,1] . q . 0 9532428 1 3356311 2 2390721 3 2945009 4 1442454 5 1454228 6 1122566 7 368276 8 13549577 9 1537717 10 1596948 11 2118977 12 1789770 13 1834653 14 2627925 15 3318161 16 676569 Name: 총인구수 (명), dtype: int64 . w=covid19_total.iloc[:,3] . covid19_total2=covid19_total.assign(prob=list(map(lambda x,y: x/y,covid19_total.iloc[:,3] ,covid19_total.iloc[:,1]))) . covid19_total2.iloc[:,1:] . 총인구수 (명) (index, ) (2차접종, 당일 누계) prob . 0 9532428 | 1 | 7723156 | 0.810198 | . 1 3356311 | 2 | 2639817 | 0.786523 | . 2 2390721 | 3 | 1835971 | 0.767957 | . 3 2945009 | 4 | 2356312 | 0.800103 | . 4 1442454 | 5 | 1148110 | 0.795942 | . 5 1454228 | 6 | 1136378 | 0.781430 | . 6 1122566 | 7 | 882496 | 0.786142 | . 7 368276 | 8 | 262759 | 0.713484 | . 8 13549577 | 9 | 10835028 | 0.799658 | . 9 1537717 | 10 | 1240851 | 0.806944 | . 10 1596948 | 11 | 1311624 | 0.821332 | . 11 2118977 | 12 | 1731542 | 0.817159 | . 12 1789770 | 13 | 1465954 | 0.819074 | . 13 1834653 | 14 | 1525475 | 0.831479 | . 14 2627925 | 15 | 2091760 | 0.795974 | . 15 3318161 | 16 | 2623264 | 0.790578 | . 16 676569 | 17 | 531391 | 0.785420 | . m = folium.Map([35.84195368311022, 127.1155556693179],zoom_start=6,scrollWheelZoom=False) choro= folium.Choropleth( data=covid19_total2, geo_data= global_dict, color=&quot;prob&quot;, columns=[&#39;행정구역(시군구)별&#39;,&#39;prob&#39;], key_on=&#39;feature.properties.name&#39; ) choro.add_to(m) #m . &lt;folium.features.Choropleth at 0x7fdcf195ec40&gt; . .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-1%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "relUrl": "/2022/03/12/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-1%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "vim&#51032; &#44592;&#52488; . vim을 만들었을 때는 CLI 환경에서 만들었기 때문에 마우스로 드래그나 ctrl +c 와 같은 작업을 할 수 없었다. . vim&#51032; &#47749;&#47161;&#50612; . 터미널을 켜고 vim test.c(저장할 파일명)을 입력하면 vim의 기본모드로 갈 수 있다. . 기본모드에서 i를 입력하여 쓰기모드로 가거나 v를 입력하여 드래그르 할 수 있는 비주얼 모드로 갈 수 있다. 기본모드에서 : 을 입력하고 w를 눌러 엔터를 치는 순간 쓰기모드에서 작업했던 내용을 저장할 수 있다. 기본모드에서 : 을 입력하고 q를 눌러 엔터를 치는 순간 나가진다. 기본모드에서 u를 입력하면 ctrl +z 기능을 사용할 수 있다. 기본모드에서 /를 입력하고 찾고 싶은 내용을 치면 ctrl + f 기능을 사용할 수 있다.쓰기모드에 들어오면 --INSERT--가 화면에 나타난다. 쓰기모드에서 예를 들어 int main(){ return 0; }와 같은 입력을 할 수 있고 쓰기모드에서 esc를 누르면 다시 기본모드로 돌아간다. &#48373;&#49324; &#48143; &#48537;&#50668;&#45347;&#44592; . 코드를 입력한 줄에서 yy를 누르면 yy를 눌렀던 한줄이 복사가 되며 p를 누르면 붙여넣기를 할 수 있다. . 또한 dd를 누르면 잘라내기도 가능하다. . gcc . gcc는 코딩을 하기 위해 알아야 할 하나의 컴파일러이다. . gcc test.c를 입력하면 a.out으로 프로그램이 나오며 gcc -o result test.c를 입력하면 결과의 이름을 result를 저장하고 test.c를 넣는다는 의미이다. .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/vim.html",
            "relUrl": "/2022/03/12/vim.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "CLI는 무엇일까?",
            "content": "옛날에는 윈도우의 검은 화면의 흰 글씨 화면에서 컴퓨터를 다루었다. 그것을 CLI(command line interface)라 한다 . 1968년에 최초의 마우스가 나오면서 아이콘을 클릭해서 대상을 옮기거나 웹페이지 서핑이 가능하게 되었다. . 이렇게 GUI(Grapics user interpace)가 발명이 되었다. 하지만 GUI용 프로그램을 바로 코딩을 할 수 없었는데 그 이유는 아직 CLI을 대상으로 하는 프로그램을 짜지 못하였기 때문이다. . CLI &#54532;&#47196;&#44536;&#47016; . windows의 대표적인 CLI프로그램은 Cygwin이 있고 리눅스나 MAC은 terminal을 대표적으로 사용한다. . CLI&#51032; &#47749;&#47161;&#50612;&#47484; &#44036;&#45800;&#54616;&#44172; &#50508;&#50500;&#48372;&#51088; . 1.clear . clear 명령을 사용하면 화면을 깨끗하게 지울 수 있다. . 2.mkdir . mkdir은 make directory의 약자로 폴더를 만드는 명렁어이다. mkdir chanwoo를 입력하면 chanwoo라는 폴더가 생성된다. . 3.touch . touch는 파일을 만드는 명령어이다. touch hi.c를 입력하면 hi.c파일이 생성된다. . 4. rm . rm은 remove의 약자로 파일을 삭제하는 명령어이다. rm hi.c를 입력하면 hi.c 파일이 삭제된다. . 5. rm -r . rm -r은 폴더를 삭제하는 명령어이다. rm -r chanwoo를 입력하면 chanwoo라는 폴더가 삭제된다. . 참고로 rm -rf를 입력하면 폴더안에 파일이 너무 많을 때 강제로 폴더를 지울 수 있다. . 6. ls . ls는 list의 약자로 ls 명령어를 사용하면 현제 디렉토리에 있는 폴더의 이름이나 파일의 이름을 알 수 있다. . 6.1 ls -l . list 형식으로 현제 디렉토리에 있는 폴더의 이름이나 파일의 이름을 알 수 있으며 각각의 파일이나 폴더가 언제 만들었는지도 알 수 있다. . 6.2 ls -a . ls -a를 명령어를 입력하면 숨김 파일도 볼 수 있으며 .은 자기 자신을 의미하고 ..은 자신의 상위 디렉토리를 의미한다. . 7. cd . cd는 change directory의 약자로 cd chanwoo를 입력하면 chanwoo 폴더에 들어갈 수 있다. cd ..을 입력하면 자신의 상위 디렉토리로 이동할 수 있다. .",
            "url": "https://chanwoo2307.github.io/green/2022/03/12/CLI.html",
            "relUrl": "/2022/03/12/CLI.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chanwoo2307.github.io/green/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "An Example Markdown Post",
            "content": "내용 1 . ㅁㄴㅇㄹ . 내용 2 . ㅁㄴㅇㄹ .",
            "url": "https://chanwoo2307.github.io/green/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "수상 . ’-‘ 빅데이터 동계 캠프 AWS DeepRacer . 프로그래밍 스킬 . ’-‘ R . ’-‘ 파이썬 . ’-‘ C . ’-‘ C++ . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chanwoo2307.github.io/green/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chanwoo2307.github.io/green/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}