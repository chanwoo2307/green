{
  
    
        "post0": {
            "title": "Title",
            "content": ". . import pandas as pd mpg = pd.read_csv(&quot;mpg.csv&quot;, header=0) # csv 파일 불러오기 . mpg.shape . (234, 11) . mpg.head(6) . manufacturer model displ year cyl trans drv cty hwy fl class . 0 audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . 1 audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . 2 audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . 3 audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . 4 audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . 5 audi | a4 | 2.8 | 1999 | 6 | manual(m5) | f | 18 | 26 | p | compact | . mpg.info() #info함수를 사용하여 자료의 구조를 살펴보시오 . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 234 entries, 0 to 233 Data columns (total 11 columns): # Column Non-Null Count Dtype -- -- 0 manufacturer 234 non-null object 1 model 234 non-null object 2 displ 234 non-null float64 3 year 234 non-null int64 4 cyl 234 non-null int64 5 trans 234 non-null object 6 drv 234 non-null object 7 cty 234 non-null int64 8 hwy 234 non-null int64 9 fl 234 non-null object 10 class 234 non-null object dtypes: float64(1), int64(4), object(6) memory usage: 20.2+ KB . mpg.describe() #변수들에 대하여 데이터의 타입에 따른 요약통계량을 계산하시오. . displ year cyl cty hwy . count 234.000000 | 234.000000 | 234.000000 | 234.000000 | 234.000000 | . mean 3.471795 | 2003.500000 | 5.888889 | 16.858974 | 23.440171 | . std 1.291959 | 4.509646 | 1.611534 | 4.255946 | 5.954643 | . min 1.600000 | 1999.000000 | 4.000000 | 9.000000 | 12.000000 | . 25% 2.400000 | 1999.000000 | 4.000000 | 14.000000 | 18.000000 | . 50% 3.300000 | 2003.500000 | 6.000000 | 17.000000 | 24.000000 | . 75% 4.600000 | 2008.000000 | 8.000000 | 19.000000 | 27.000000 | . max 7.000000 | 2008.000000 | 8.000000 | 35.000000 | 44.000000 | . mpg.describe(include=&#39;all&#39;) #데이터 보기 . manufacturer model displ year cyl trans drv cty hwy fl class . count 234 | 234 | 234.000000 | 234.000000 | 234.000000 | 234 | 234 | 234.000000 | 234.000000 | 234 | 234 | . unique 15 | 38 | NaN | NaN | NaN | 10 | 3 | NaN | NaN | 5 | 7 | . top dodge | caravan 2wd | NaN | NaN | NaN | auto(l4) | f | NaN | NaN | r | suv | . freq 37 | 11 | NaN | NaN | NaN | 83 | 106 | NaN | NaN | 168 | 62 | . mean NaN | NaN | 3.471795 | 2003.500000 | 5.888889 | NaN | NaN | 16.858974 | 23.440171 | NaN | NaN | . std NaN | NaN | 1.291959 | 4.509646 | 1.611534 | NaN | NaN | 4.255946 | 5.954643 | NaN | NaN | . min NaN | NaN | 1.600000 | 1999.000000 | 4.000000 | NaN | NaN | 9.000000 | 12.000000 | NaN | NaN | . 25% NaN | NaN | 2.400000 | 1999.000000 | 4.000000 | NaN | NaN | 14.000000 | 18.000000 | NaN | NaN | . 50% NaN | NaN | 3.300000 | 2003.500000 | 6.000000 | NaN | NaN | 17.000000 | 24.000000 | NaN | NaN | . 75% NaN | NaN | 4.600000 | 2008.000000 | 8.000000 | NaN | NaN | 19.000000 | 27.000000 | NaN | NaN | . max NaN | NaN | 7.000000 | 2008.000000 | 8.000000 | NaN | NaN | 35.000000 | 44.000000 | NaN | NaN | . mpg.describe(include=&#39;object&#39;) . manufacturer model trans drv fl class . count 234 | 234 | 234 | 234 | 234 | 234 | . unique 15 | 38 | 10 | 3 | 5 | 7 | . top dodge | caravan 2wd | auto(l4) | f | r | suv | . freq 37 | 11 | 83 | 106 | 168 | 62 | . mpg.dtypes #mpg 데이터 유형 확인 . manufacturer object model object displ float64 year int64 cyl int64 trans object drv object cty int64 hwy int64 fl object class object dtype: object . mpg[&#39;manufacturer&#39;].value_counts() #manufacturer 범주형 빈도분석 . dodge 37 toyota 34 volkswagen 27 ford 25 chevrolet 19 audi 18 hyundai 14 subaru 14 nissan 13 honda 9 jeep 8 pontiac 5 land rover 4 mercury 4 lincoln 3 Name: manufacturer, dtype: int64 . mpg[&#39;model&#39;].value_counts() #moder 범주형 빈도분석 . caravan 2wd 11 ram 1500 pickup 4wd 10 dakota pickup 4wd 9 jetta 9 mustang 9 civic 9 impreza awd 8 grand cherokee 4wd 8 a4 quattro 8 camry solara 7 sonata 7 durango 4wd 7 toyota tacoma 4wd 7 camry 7 passat 7 f150 pickup 4wd 7 tiburon 7 a4 7 4runner 4wd 6 explorer 4wd 6 altima 6 forester awd 6 new beetle 6 corvette 5 grand prix 5 malibu 5 gti 5 c1500 suburban 2wd 5 corolla 5 k1500 tahoe 4wd 4 range rover 4 pathfinder 4wd 4 mountaineer 4wd 4 expedition 2wd 3 a6 quattro 3 navigator 2wd 3 maxima 3 land cruiser wagon 4wd 2 Name: model, dtype: int64 . mpg[&#39;trans&#39;].value_counts() #trans 범주형 빈도분석 . auto(l4) 83 manual(m5) 58 auto(l5) 39 manual(m6) 19 auto(s6) 16 auto(l6) 6 auto(av) 5 auto(s4) 3 auto(s5) 3 auto(l3) 2 Name: trans, dtype: int64 . mpg[&#39;drv&#39;].value_counts() #drv 범주형 빈도분석 . f 106 4 103 r 25 Name: drv, dtype: int64 . pd.crosstab(mpg[&#39;trans&#39;],mpg[&#39;drv&#39;], margins=True)# trans, drv별 교차분석 . drv 4 f r All . trans . auto(av) 0 | 5 | 0 | 5 | . auto(l3) 0 | 2 | 0 | 2 | . auto(l4) 34 | 37 | 12 | 83 | . auto(l5) 29 | 8 | 2 | 39 | . auto(l6) 2 | 2 | 2 | 6 | . auto(s4) 2 | 1 | 0 | 3 | . auto(s5) 1 | 2 | 0 | 3 | . auto(s6) 7 | 8 | 1 | 16 | . manual(m5) 21 | 33 | 4 | 58 | . manual(m6) 7 | 8 | 4 | 19 | . All 103 | 106 | 25 | 234 | . pd.crosstab(mpg[&#39;trans&#39;],mpg[&#39;drv&#39;]).apply(lambda r: r/len(mpg), axis=1) #전체 빈도 비율 확인 . drv 4 f r . trans . auto(av) 0.000000 | 0.021368 | 0.000000 | . auto(l3) 0.000000 | 0.008547 | 0.000000 | . auto(l4) 0.145299 | 0.158120 | 0.051282 | . auto(l5) 0.123932 | 0.034188 | 0.008547 | . auto(l6) 0.008547 | 0.008547 | 0.008547 | . auto(s4) 0.008547 | 0.004274 | 0.000000 | . auto(s5) 0.004274 | 0.008547 | 0.000000 | . auto(s6) 0.029915 | 0.034188 | 0.004274 | . manual(m5) 0.089744 | 0.141026 | 0.017094 | . manual(m6) 0.029915 | 0.034188 | 0.017094 | . . . import pandas as pd census = pd.read_csv(&quot;http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data&quot;, header=None) census.columns = [&#39;age&#39;, &#39;workclass&#39;, &#39;fnlwgt&#39;, &#39;eduction&#39;, &#39;education.num&#39;, &#39;marital.status&#39;, &#39;occupation&#39;, &#39;relationship&#39;, &#39;race&#39;, &#39;sex&#39;, &#39;capital.gain&#39;, &#39;capital.loss&#39;, &#39;hours.per.week&#39;, &#39;native.country&#39;, &#39;income&#39;] . census.head() . age workclass fnlwgt eduction education.num marital.status occupation relationship race sex capital.gain capital.loss hours.per.week native.country income . 0 39 | State-gov | 77516 | Bachelors | 13 | Never-married | Adm-clerical | Not-in-family | White | Male | 2174 | 0 | 40 | United-States | &lt;=50K | . 1 50 | Self-emp-not-inc | 83311 | Bachelors | 13 | Married-civ-spouse | Exec-managerial | Husband | White | Male | 0 | 0 | 13 | United-States | &lt;=50K | . 2 38 | Private | 215646 | HS-grad | 9 | Divorced | Handlers-cleaners | Not-in-family | White | Male | 0 | 0 | 40 | United-States | &lt;=50K | . 3 53 | Private | 234721 | 11th | 7 | Married-civ-spouse | Handlers-cleaners | Husband | Black | Male | 0 | 0 | 40 | United-States | &lt;=50K | . 4 28 | Private | 338409 | Bachelors | 13 | Married-civ-spouse | Prof-specialty | Wife | Black | Female | 0 | 0 | 40 | Cuba | &lt;=50K | . census.info() #info함수를 이용하여 자료의 구조를 살펴보시오. . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 32561 entries, 0 to 32560 Data columns (total 15 columns): # Column Non-Null Count Dtype -- -- 0 age 32561 non-null int64 1 workclass 32561 non-null object 2 fnlwgt 32561 non-null int64 3 eduction 32561 non-null object 4 education.num 32561 non-null int64 5 marital.status 32561 non-null object 6 occupation 32561 non-null object 7 relationship 32561 non-null object 8 race 32561 non-null object 9 sex 32561 non-null object 10 capital.gain 32561 non-null int64 11 capital.loss 32561 non-null int64 12 hours.per.week 32561 non-null int64 13 native.country 32561 non-null object 14 income 32561 non-null object dtypes: int64(6), object(9) memory usage: 3.7+ MB . census.describe() #각 변수들에 대하여 데이터의 타입에 따른 요약통계량을 계산하시오. . age fnlwgt education.num capital.gain capital.loss hours.per.week . count 32561.000000 | 3.256100e+04 | 32561.000000 | 32561.000000 | 32561.000000 | 32561.000000 | . mean 38.581647 | 1.897784e+05 | 10.080679 | 1077.648844 | 87.303830 | 40.437456 | . std 13.640433 | 1.055500e+05 | 2.572720 | 7385.292085 | 402.960219 | 12.347429 | . min 17.000000 | 1.228500e+04 | 1.000000 | 0.000000 | 0.000000 | 1.000000 | . 25% 28.000000 | 1.178270e+05 | 9.000000 | 0.000000 | 0.000000 | 40.000000 | . 50% 37.000000 | 1.783560e+05 | 10.000000 | 0.000000 | 0.000000 | 40.000000 | . 75% 48.000000 | 2.370510e+05 | 12.000000 | 0.000000 | 0.000000 | 45.000000 | . max 90.000000 | 1.484705e+06 | 16.000000 | 99999.000000 | 4356.000000 | 99.000000 | . census.describe(include=&#39;all&#39;) . age workclass fnlwgt eduction education.num marital.status occupation relationship race sex capital.gain capital.loss hours.per.week native.country income . count 32561.000000 | 32561 | 3.256100e+04 | 32561 | 32561.000000 | 32561 | 32561 | 32561 | 32561 | 32561 | 32561.000000 | 32561.000000 | 32561.000000 | 32561 | 32561 | . unique NaN | 9 | NaN | 16 | NaN | 7 | 15 | 6 | 5 | 2 | NaN | NaN | NaN | 42 | 2 | . top NaN | Private | NaN | HS-grad | NaN | Married-civ-spouse | Prof-specialty | Husband | White | Male | NaN | NaN | NaN | United-States | &lt;=50K | . freq NaN | 22696 | NaN | 10501 | NaN | 14976 | 4140 | 13193 | 27816 | 21790 | NaN | NaN | NaN | 29170 | 24720 | . mean 38.581647 | NaN | 1.897784e+05 | NaN | 10.080679 | NaN | NaN | NaN | NaN | NaN | 1077.648844 | 87.303830 | 40.437456 | NaN | NaN | . std 13.640433 | NaN | 1.055500e+05 | NaN | 2.572720 | NaN | NaN | NaN | NaN | NaN | 7385.292085 | 402.960219 | 12.347429 | NaN | NaN | . min 17.000000 | NaN | 1.228500e+04 | NaN | 1.000000 | NaN | NaN | NaN | NaN | NaN | 0.000000 | 0.000000 | 1.000000 | NaN | NaN | . 25% 28.000000 | NaN | 1.178270e+05 | NaN | 9.000000 | NaN | NaN | NaN | NaN | NaN | 0.000000 | 0.000000 | 40.000000 | NaN | NaN | . 50% 37.000000 | NaN | 1.783560e+05 | NaN | 10.000000 | NaN | NaN | NaN | NaN | NaN | 0.000000 | 0.000000 | 40.000000 | NaN | NaN | . 75% 48.000000 | NaN | 2.370510e+05 | NaN | 12.000000 | NaN | NaN | NaN | NaN | NaN | 0.000000 | 0.000000 | 45.000000 | NaN | NaN | . max 90.000000 | NaN | 1.484705e+06 | NaN | 16.000000 | NaN | NaN | NaN | NaN | NaN | 99999.000000 | 4356.000000 | 99.000000 | NaN | NaN | . census.describe(include=&#39;object&#39;) . workclass eduction marital.status occupation relationship race sex native.country income . count 32561 | 32561 | 32561 | 32561 | 32561 | 32561 | 32561 | 32561 | 32561 | . unique 9 | 16 | 7 | 15 | 6 | 5 | 2 | 42 | 2 | . top Private | HS-grad | Married-civ-spouse | Prof-specialty | Husband | White | Male | United-States | &lt;=50K | . freq 22696 | 10501 | 14976 | 4140 | 13193 | 27816 | 21790 | 29170 | 24720 | . census . age workclass fnlwgt eduction education.num marital.status occupation relationship race sex capital.gain capital.loss hours.per.week native.country income . 0 39 | State-gov | 77516 | Bachelors | 13 | Never-married | Adm-clerical | Not-in-family | White | Male | 2174 | 0 | 40 | United-States | &lt;=50K | . 1 50 | Self-emp-not-inc | 83311 | Bachelors | 13 | Married-civ-spouse | Exec-managerial | Husband | White | Male | 0 | 0 | 13 | United-States | &lt;=50K | . 2 38 | Private | 215646 | HS-grad | 9 | Divorced | Handlers-cleaners | Not-in-family | White | Male | 0 | 0 | 40 | United-States | &lt;=50K | . 3 53 | Private | 234721 | 11th | 7 | Married-civ-spouse | Handlers-cleaners | Husband | Black | Male | 0 | 0 | 40 | United-States | &lt;=50K | . 4 28 | Private | 338409 | Bachelors | 13 | Married-civ-spouse | Prof-specialty | Wife | Black | Female | 0 | 0 | 40 | Cuba | &lt;=50K | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 32556 27 | Private | 257302 | Assoc-acdm | 12 | Married-civ-spouse | Tech-support | Wife | White | Female | 0 | 0 | 38 | United-States | &lt;=50K | . 32557 40 | Private | 154374 | HS-grad | 9 | Married-civ-spouse | Machine-op-inspct | Husband | White | Male | 0 | 0 | 40 | United-States | &gt;50K | . 32558 58 | Private | 151910 | HS-grad | 9 | Widowed | Adm-clerical | Unmarried | White | Female | 0 | 0 | 40 | United-States | &lt;=50K | . 32559 22 | Private | 201490 | HS-grad | 9 | Never-married | Adm-clerical | Own-child | White | Male | 0 | 0 | 20 | United-States | &lt;=50K | . 32560 52 | Self-emp-inc | 287927 | HS-grad | 9 | Married-civ-spouse | Exec-managerial | Wife | White | Female | 15024 | 0 | 40 | United-States | &gt;50K | . 32561 rows × 15 columns . census.dtypes #데이터 유형 확인 . age int64 workclass object fnlwgt int64 eduction object education.num int64 marital.status object occupation object relationship object race object sex object capital.gain int64 capital.loss int64 hours.per.week int64 native.country object income object dtype: object . census[&#39;workclass&#39;].value_counts() #workclass 범주형 빈도분석 . Private 22696 Self-emp-not-inc 2541 Local-gov 2093 ? 1836 State-gov 1298 Self-emp-inc 1116 Federal-gov 960 Without-pay 14 Never-worked 7 Name: workclass, dtype: int64 . census[&#39;eduction&#39;].value_counts() #education 범주형 빈도분석 . HS-grad 10501 Some-college 7291 Bachelors 5355 Masters 1723 Assoc-voc 1382 11th 1175 Assoc-acdm 1067 10th 933 7th-8th 646 Prof-school 576 9th 514 12th 433 Doctorate 413 5th-6th 333 1st-4th 168 Preschool 51 Name: eduction, dtype: int64 . census[&#39;marital.status&#39;].value_counts() #marital.status 범주형 빈도분석 . Married-civ-spouse 14976 Never-married 10683 Divorced 4443 Separated 1025 Widowed 993 Married-spouse-absent 418 Married-AF-spouse 23 Name: marital.status, dtype: int64 . pd.crosstab(census[&#39;eduction&#39;], census[&#39;marital.status&#39;]) #eduction, marital.status별 교차 분석 . marital.status Divorced Married-AF-spouse Married-civ-spouse Married-spouse-absent Never-married Separated Widowed . eduction . 10th 120 | 0 | 349 | 15 | 361 | 49 | 39 | . 11th 130 | 0 | 354 | 19 | 586 | 48 | 38 | . 12th 39 | 0 | 130 | 8 | 232 | 14 | 10 | . 1st-4th 10 | 0 | 81 | 12 | 39 | 9 | 17 | . 5th-6th 20 | 0 | 172 | 20 | 89 | 18 | 14 | . 7th-8th 73 | 0 | 359 | 14 | 113 | 23 | 64 | . 9th 64 | 0 | 230 | 9 | 155 | 33 | 23 | . Assoc-acdm 203 | 2 | 460 | 12 | 337 | 30 | 23 | . Assoc-voc 234 | 1 | 689 | 13 | 362 | 42 | 41 | . Bachelors 546 | 4 | 2768 | 68 | 1795 | 92 | 82 | . Doctorate 33 | 0 | 286 | 7 | 73 | 7 | 7 | . HS-grad 1613 | 13 | 4845 | 121 | 3089 | 406 | 414 | . Masters 233 | 0 | 1003 | 17 | 404 | 25 | 41 | . Preschool 1 | 0 | 20 | 4 | 22 | 1 | 3 | . Prof-school 55 | 0 | 412 | 3 | 93 | 8 | 5 | . Some-college 1069 | 3 | 2818 | 76 | 2933 | 220 | 172 | . pd.crosstab(census[&#39;eduction&#39;], census[&#39;marital.status&#39;]).apply(lambda r: r/len(mpg), axis=1) #전체 빈도 비율 확인 . marital.status Divorced Married-AF-spouse Married-civ-spouse Married-spouse-absent Never-married Separated Widowed . eduction . 10th 0.512821 | 0.000000 | 1.491453 | 0.064103 | 1.542735 | 0.209402 | 0.166667 | . 11th 0.555556 | 0.000000 | 1.512821 | 0.081197 | 2.504274 | 0.205128 | 0.162393 | . 12th 0.166667 | 0.000000 | 0.555556 | 0.034188 | 0.991453 | 0.059829 | 0.042735 | . 1st-4th 0.042735 | 0.000000 | 0.346154 | 0.051282 | 0.166667 | 0.038462 | 0.072650 | . 5th-6th 0.085470 | 0.000000 | 0.735043 | 0.085470 | 0.380342 | 0.076923 | 0.059829 | . 7th-8th 0.311966 | 0.000000 | 1.534188 | 0.059829 | 0.482906 | 0.098291 | 0.273504 | . 9th 0.273504 | 0.000000 | 0.982906 | 0.038462 | 0.662393 | 0.141026 | 0.098291 | . Assoc-acdm 0.867521 | 0.008547 | 1.965812 | 0.051282 | 1.440171 | 0.128205 | 0.098291 | . Assoc-voc 1.000000 | 0.004274 | 2.944444 | 0.055556 | 1.547009 | 0.179487 | 0.175214 | . Bachelors 2.333333 | 0.017094 | 11.829060 | 0.290598 | 7.670940 | 0.393162 | 0.350427 | . Doctorate 0.141026 | 0.000000 | 1.222222 | 0.029915 | 0.311966 | 0.029915 | 0.029915 | . HS-grad 6.893162 | 0.055556 | 20.705128 | 0.517094 | 13.200855 | 1.735043 | 1.769231 | . Masters 0.995726 | 0.000000 | 4.286325 | 0.072650 | 1.726496 | 0.106838 | 0.175214 | . Preschool 0.004274 | 0.000000 | 0.085470 | 0.017094 | 0.094017 | 0.004274 | 0.012821 | . Prof-school 0.235043 | 0.000000 | 1.760684 | 0.012821 | 0.397436 | 0.034188 | 0.021368 | . Some-college 4.568376 | 0.012821 | 12.042735 | 0.324786 | 12.534188 | 0.940171 | 0.735043 | .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/%EC%9B%94-23%EC%9D%BC-%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%9C%EB%A1%A0-%EA%B3%BC%EC%A0%9C.html",
            "relUrl": "/2022/02/19/%EC%9B%94-23%EC%9D%BC-%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%9C%EB%A1%A0-%EA%B3%BC%EC%A0%9C.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import numpy as np import pandas as pd import warnings from IPython.display import HTML from pandas_datareader import data as pdr import json import folium import json import requests . df = pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/covid19_20211202.csv&#39;) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 0 누적(명) | 457,612 | 158,774 | 16,555 | 19,114 | 25,299 | 6,353 | 8,809 | 5,675 | 1,588 | 136,546 | 8,889 | 8,942 | 13,174 | 6,453 | 4,498 | 11,471 | 15,236 | 3,762 | 6,474 | . 1 2020-01-20 | 1 | - | - | - | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 2 2020-01-21 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 3 2020-01-22 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 4 2020-01-23 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3,925 | 1,673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1,090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3,308 | 1,393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3,032 | 1,186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5,123 | 2,222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1,582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5,266 | 2,268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1,495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 684 rows × 20 columns . df=df.iloc[1:,:] . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 1 2020-01-20 | 1 | - | - | - | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 2 2020-01-21 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 3 2020-01-22 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 4 2020-01-23 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 5 2020-01-24 | 1 | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3,925 | 1,673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1,090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3,308 | 1,393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3,032 | 1,186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5,123 | 2,222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1,582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5,266 | 2,268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1,495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 683 rows × 20 columns . #df[&quot;서울&quot;]=df[&quot;서울&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;부산&quot;]=df[&quot;부산&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;대구&quot;]=df[&quot;대구&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;인천&quot;]=df[&quot;인천&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;광주&quot;]=df[&quot;광주&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;대전&quot;]=df[&quot;대전&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;울산&quot;]=df[&quot;울산&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;세종&quot;]=df[&quot;세종&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;경기&quot;]=df[&quot;경기&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;강원&quot;]=df[&quot;강원&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;충북&quot;]=df[&quot;충북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;충남&quot;]=df[&quot;충남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;전북&quot;]=df[&quot;전북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;전남&quot;]=df[&quot;전남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;경북&quot;]=df[&quot;경북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;경남&quot;]=df[&quot;경남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;제주&quot;]=df[&quot;제주&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) #df[&quot;검역&quot;]=df[&quot;검역&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 1 2020-01-20 | 1 | | | | 1 | | | | | | | | | | | | | | | . 2 2020-01-21 | 0 | | | | | | | | | | | | | | | | | | | . 3 2020-01-22 | 0 | | | | | | | | | | | | | | | | | | | . 4 2020-01-23 | 0 | | | | | | | | | | | | | | | | | | | . 5 2020-01-24 | 1 | 1 | | | | | | | | | | | | | | | | | | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3925 | 1673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3308 | 1393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3032 | 1186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5123 | 2222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5266 | 2268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 683 rows × 20 columns . def sep_yearmonths(x): x[&#39;month&#39;] = str(x[&#39;일자&#39;])[:-3] return x df = df.apply(sep_yearmonths,axis=1) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 ... 강원 충북 충남 전북 전남 경북 경남 제주 검역 month . 1 2020-01-20 | 1 | | | | 1 | | | | | ... | | | | | | | | | | 2020-01 | . 2 2020-01-21 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 3 2020-01-22 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 4 2020-01-23 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 5 2020-01-24 | 1 | 1 | | | | | | | | ... | | | | | | | | | | 2020-01 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3925 | 1673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | ... | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | 2021-11 | . 680 2021-11-29 | 3308 | 1393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | ... | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | 2021-11 | . 681 2021-11-30 | 3032 | 1186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | ... | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | 2021-11 | . 682 2021-12-01 | 5123 | 2222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | ... | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | 2021-12 | . 683 2021-12-02 | 5266 | 2268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | ... | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | 2021-12 | . 683 rows × 21 columns . df1=df.iloc[:,1:] . df1.groupby(by=&#39;month&#39;).agg(&#39;sum&#39;) . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . month . 2020-01 100010110034 | 133 | | | 1 | | | | | 11 | | | | 1 | | | | | | . 2020-02 130153003100000202341674190210207130253449427909 | 1222252347810712 | 27818138514 | 12712446713615254184340296742 | 1112 | 111312 | 111541 | 111356 | 1 | 1223111281253121110 | 61 | 12223 | 115932 | 112 | 11 | 541710639194436537475 | 227914111013 | 11 | | . 2020-03 5956866005164385184833672481312421141101077674... | 8975231210115319121396125121715106413131218201624 | 4623311221331112111311 | 5125175203983263673902971909213172616241353246... | 111412211111441113576 | 22211111 | 11122226132 | 3311212612 | 113225176111122 | 8829710101112101138151120311518141216141521141... | 121122111111122 | 113541213111121123 | 12174144264282131131211 | 112121 | 111121 | 4810859958112265322510188464759121340112151292... | 1212935111111111311 | 112111 | 132551611132034301324211315 | . 2020-04 1018986948147475339273032252727222218813911861... | 2414182224114111254382522122214 | 31211322111 | 20219277131394723314321214321123 | 5413214111111111 | 411112 | 121 | 1111 | | 2218232310810610994386414221126332 | 2121322211 | 1 | 32111111211 | 11111 | 321 | 2251421373345644212211 | 46111211211 | 31 | 817221524714141046186744114243221415334 | . 2020-05 9613832412183435272629271913151332122023251619... | 112121421121141455161042466919242096 | 1213111 | 43213311111113221 | 111113312125286121311221853 | 2 | 12111 | 11412 | 1 | 22112463836343110613662621201312 | 1111 | 11233131 | 111 | 111 | 1111 | 11126111 | 11211 | 11 | 43542213631118472173412175 | . 2020-06 3538493939515737385045564834373443594967481746... | 1141914152327211912212529127121325181417561191... | 12211 | 11111132112111212 | 189167611643861188221511312113 | 1443 | 357651048442625 | 12 | 111 | 1214131513819813211619141010513161117106779417... | 1112111 | 1111 | 1122132121131 | 111111 | 131 | 121111111 | 1123211 | 13 | 21215236210117974111842612471116513 | . 2020-07 5154616361484462504535446233396160393426456359... | 913127163310888713767961032116122111796938 | 1112251121 | 1311121112322121 | 212621311313212533 | 12226816768153957111510149211 | 41438222672113111 | 1111 | | 161018198613188144171195211510412152881476611510 | 11232 | 2211111 | 1311611411111 | 111212121 | 121131212 | 11111111112 | 211223121222121 | 13111 | 5241891516115481218122320251271018195381427102... | . 2020-08 3130233433432043362834545610316627919724629728... | 2559699171313615263274146901321511351261291409... | 111319425377791583233488664 | 2111111623496531386304 | 111214697188101821322014275927201314 | 12126221774615111714739171629 | 112875151011733467 | 11133133122135 | 213133211 | 7311171351815613191747729870529985103951248572... | 1213126591615681814323 | 16111312132310215651 | 212113254535137108912159889 | 121171654447221 | 12123671471131312985 | 1111411123356426141132 | 24111213499125841271 | 23212126 | 191714766551638372262234443338573 | . 2020-09 2352671951981681671191361561551761361211091061... | 9410169685163486749486350314132516446402823214... | 3744102912134334422268577323135 | 21337552221141444222213112 | 2211165141212158831099761132251031914 | 41061187913175833312112223 | 814442554811117213113222112 | 6583113344517111211 | 121311 | 6384645650473131555047323230392654374126182030... | 424335231121211 | 11144211312231122223211 | 777214238121461183210641511225 | 2113111211581113323 | 4361311221111 | 944123322211265451462636426 | 313863113312334112111111 | 111221321 | 433444444491075522216102656911795 | . 2020-10 7763756473751146954725898918411047739176588912... | 3011261619153320222523312023251818201411171820... | 6188553255334125564152105112 | 12111111125123109 | 347654658138114215364523210533 | 11212162 | 2213275121310412121451157 | 14111111122 | 1113 | 2119101627355324122421303831817325018282467103... | 2141321322161476 | 11211111121212 | 311231221122211452111135 | 13982112122312 | 1312111231 | 5424111112221351 | 1311211235311 | | 661492573653910146351312320986917529425 | . 2020-11 1249775117125145891431261001451431912052082222... | 4525224250403754463545537469858090921091321561... | 1142213245527156182224282252 | 232217613113221112351134 | 42145132312412101312123022272317401825252134 | 3221546589418984781314141316813 | 1111223111134151365 | 11113111237733 | 1111124331 | 3841274327472125223353354749454252876473937576... | 31117491139623181920135202415131246138933198 | 12122422118342133820242222 | 911710232599104798115697131521139818163117135 | 14142121314129158162491716 | 32422189139101615281419135789117204 | 121211121431681086493235114 | 211513510421143434392818111923114539141520 | 1111211333211 | 147121061181411879142118238222189205107121731710 | . 2020-12 4515115406285776316155876706806899501030718880... | 1551932622952352542442112622502523623992192513... | 3132153129343526193126595721414144393933202632... | 1143673542363528161927212020252139242623132124... | 1623221719424025463737426236556780654662884549... | 22103165511953915225210491413263615362817121598 | 105721103211109101813232151155339351113118330197 | 3102513386114164723854961031961761891281241635 | 274431111311112116242 | 9614414116015718415615721921522927233122628832... | 9128391298515113618141389182755252313211436232... | 3216105181411102312202115212523193110314333158... | 1681423101510154201010105537351918242016171131... | 9269141712221312876981575191615291342112143781... | 2123483725486114554951225657415 | 1151191711954831918161528931292548592550673434... | 1171316271616132916121724281619304432511518292... | 12121213538915122724242319332620247115109 | 1461317612107916712141786794991891161010851113 | . 2021-01 1027820657102071483886967464165745153756152451... | 3572501983291992632971911881871411671521341271... | 5726193715382324173419213540476134101713192333... | 4329222932211018132711181311112315131612762212... | 6571481034938413049332221222524333513191623912... | 1713267423302821621247431661511811627171612112... | 1148689985417933532711112541412 | 43177542910834147111068186833322266226 | 131131241123111122412 | 2842272042682302843032582111921471752011711861... | 3031332827163011620117211113234161711896114431... | 22362723322114103091016111896795371412878259111 | 157923182420212730113512687118810717913644695 | 811513522281467128361753325741131632 | 6111234115432613131546914710139128511 | 2420142524283630211948231823201518978151881581... | 3537123321292022261913554216222018221119162132... | 5134108596542212142165232121 | 414811156146101411831158810815912911612791515 | . 2021-02 3053364674513703903712883034445044033623263434... | 1071281881721261431441129017518315813615215016... | 1512192633149991929272715151919281614121212131... | 912981418122191613121431312149119841019141066 | 1182144262517181620254330191221211738372119141... | 322461214121078141363232316456573515111214 | 172864231528471242312621 | 1122113223479612141212135 | 11111252211112116 | 9282111134114111112831261691881059980102134154... | 8768516435116251534756201492664 | 61894321324655761718166741410810 | 453613131314105211315129587528241210681216347 | 3210143272564566388478516207 | 13621424252154101083611155 | 510126771652145583152322197118189674 | 411886124479544638879876582612 | 113262244153232511 | 6121767112781161565768612107845410839 | . 2021-03 3553444444243984184163464464704654884904593793... | 9212211911812912813210010213813814014011210979... | 1617818201261219714151713471177919268172011335... | 10146203486314496531414516141431717142310101215 | 1411201813202815202318312620181421212412221013... | 843663415331123112112122125352212 | 123113112112781423141082117 | 2134231121235112345337182543311 | 154122122311217 | 1601162271861731731721281882031841661642031611... | 5266471010132030121816101310233117142191827243... | 8619121922920212162716793128881056617133916122821 | 4444976141564392646145651184328158 | 109563454858427572115151611775535582520 | 273136633341211211211 | 1376761313324119149344541151120121013117356 | 5551035311785662533165453542315437292730371913... | 543254322221132121113212 | 59264655451066677997497885339437 | . 2021-04 5515575435434734776687006716776145875427316986... | 1991661551491521471982442152012141621582472172... | 5438616148343852535645473949544435312629333733... | 7171015221616101856169111841213241525241241471... | 2023212222274825452417121626171223191118151410... | 31346251495411413114179161581561284 | 1019192913226125261371713111064521817132106481... | 5731114261392511343230212426212821393238504313... | 1381034175415223321111311221 | 1301601471501111071752302032021861761682382242... | 2010176141516736561361871219211815241591012211134 | 2019111471217871210208292091210101420193015151... | 1510101214612201815221814104137221316861014671... | 2215202416291024222340242511161516211638699765... | 11115157111763611166234486192525 | 7301716202591172613151014192429281921162322322... | 2118281412725111546161715272444386735294158635... | 2412235277323311217433315311 | 21191010547748851215117981013523113020237115 | . 2021-05 6276064885416765745257015644635106347157476816... | 1951821271842382121792421951411632222272312542... | 2933161623282127102014102024423112132717152815... | 1210121067913648659561923239195657482930272422... | 1317151316191422111321201734161514162313121512... | 4155488215692422231111142711415131591621211589913 | 139513181879247818311042121081551211151723181176 | 5252212922383548282419313126221116627251329241... | 414615171273439111414988163 | 1901451301241681421391941491371371872261731701... | 4410224812827751217172512535251687291920212571... | 51197116599441210452023132113126979139142267 | 1716101910159310151810192212181615171941172431... | 10121212656589122210141114979716121445664679 | 2124912101212249101712502613201210717161014711... | 1230322238221221191915723351911272324331116121... | 4361443627173237301610163232404530161612182117... | 711813612518142413910149151146578191762671387 | 1561171284173113121314992091271610211011221331... | . 2021-06 4596776816957445564854546026105565654523993735... | 1472582152062771791591391832122042081761221312... | 2821321417211215161528261317916171018211461620... | 4239746541462633443024231520161671113161837351... | 1720221016231513232218201514121217222222918281... | 5547924174173441624322415812726 | 1923151831182022252215221110152918135815315815... | 21481557103671562472211555513162268134 | 33134332111842123268122833 | 1161922112092111601511301611801731741491221201... | 1314171814102530161111101137795139101751335191... | 1155222417116232416126231417181910631610610545105 | 12713910139457551077857121011129747248118 | 610123143462421242745332262562710 | 51031214938645434386453108261836247 | 91211111010971311657453311468112129794164 | 8212344201728483933202581337514111113111823171... | 1214122122191387105559698672314592262 | 4938551085849171698810121912291319133134111617 | . 2021-07 7618257947437117461211127513161378132411001150... | 3333463592893073205825505035095094034176375195... | 1829392825293455586156445063655062706549102104... | 7983681315191423373852513229423330353860526960... | 3622163322235764828466567196909781836771128130... | 7233741124212314915212312231425231199131823273... | 1625283219263013294832253141604933458373738167... | 2111131319163022871119141112149182522199351814... | 5234455513686272581361086956115412 | 2492642522312202293673924054514073273184644964... | 1014111979121624162018191625284552274254476246... | 4762325814198148101214112944415283531413113403... | 1527167121316785229324536365139524033304939283... | 7743668381424189241385101519410427243223312314 | 54764109526191362688111692118232016281520201913 | 5749131164913121382213121615191925291621282225... | 1013101522191510173667405189888089997457899193... | 1342651917311024719219101411118342429151412172... | 3133235025302025392112202919283424161472129020... | . 2021-08 1442121812001725177517041823172714911537222119... | 4733643114864664645034504153596605265245134883... | 5872691111121071461471231051261321801531561276... | 2326377512184686386806639578257454661523934515... | 8962488390103907565661111149779100110789215312... | 1417181617141832191520201517292918312222272233... | 6964785970505733425143515842443133344958282330... | 2013815132421582551485439262931223268302736372... | 937815201871481171053361313211171610912288 | 4063373604874864625144614084206665755405735103... | 4425252231263325242219423339314126402928401526... | 1726394545414355384756755245443743335944414643... | 4638515571535486686686857264624342708376755168... | 1413163319342020213131242721121425203940242136... | 9641520242020142618271828182725341723159109881... | 2831254860564956305967638254767538374767111503... | 8484721148298131118881101411101251039386106105... | 2012212324161351112282344553865374637565235323... | 1925113033282516131327161924243114141313209201... | . 2021-09 2024196017081803149013751597204820491892186417... | 6655595425655084644826716676706596585565398087... | 6971585139523531353835433538435852524647453824... | 5566524220433861504445623127274738714735464153... | 1231231189810083871201081201321481511241641371... | 3742432639283443222521271435381321272235404036... | 3061465038303439384865453941373643444849441643... | 7142354741394749704131341735313117343015162023... | 1074834586594421871212894410141081441014 | 6396975205804484004817036436135724884024616896... | 3527184524252233333334191421293639484628393331... | 4927303017243639333230453521374137413536272725... | 8695819973628584152799279585985505673473445625... | 2618282614730322625171410171620367320383127406... | 1713153016435222221251151581371267231517282516... | 4442464042384525332834202515223338244137272821... | 5354515252578770774538462322283335432232262928... | 10111087959231764412611936107591415797515 | 55116969911819810657161177146378912399 | . 2021-10 2483224720851670157420272425217119531594129713... | 9137927355725216908367727125835114825827476815... | 4642333747384934303149254047322236353935294440... | 8580586850644645504845506646384740453536262121... | 1591161281201061332001281319572818614296103109... | 282522131516132518231471410669431215394359751623 | 3835413839313031301022232161298515985884131569711 | 2419185124141613911177687430713634986435 | 81173105111044363331020381200612144 | 8257596785344966858567596385503594115096906115... | 5233503724312933281817281722211924872731182013... | 3960444444387464647560688848476941304269574147... | 6051444234695260583125573447333944334043442742... | 3223292123202422191020231316111615181491016191... | 2922251313131817145111716192424229149121559566... | 6056976057555577394530244145345228184275354535... | 6910865477012096557339341730351317302920332034... | 98575499267871191075653663811674491 | 77698111314611635137805022478868844 | . 2021-11 1684158926672482234222462224175817152425251923... | 6466001004946979915848707662973100394810059788... | 5528805956594034467469636482688710390778686905... | 5742666643385534443342707372493856734761445350... | 1271131831711521441619811115918712016615610213... | 5171214121820281122321131192611343424397057554... | 9281917242123222523342532183334463653324336685... | 127745121545204174914104591071113137423 | 2510222134661216161037758720151151522 | 5645018998737426927035445288678217926487996026... | 1329293922424230212329303131355154627259755566... | 2124484735435435173134262327182828262034202620... | 4769918811065666260585059775457427182567447477... | 2414433816352221123639655844385650542430413442... | 1834211715403117217171519261929364046663827205... | 2721313984359460483633413542349265149352639516... | 5054108363373464077607668414446456698787976658... | 2217177414162011142115141043232831231517292229... | 5181158245313443515712657175451038 | . 2021-12 51235266 | 22222268 | 143158 | 8670 | 326355 | 2939 | 88166 | 1718 | 208 | 15821495 | 105145 | 4849 | 96149 | 5071 | 4039 | 97106 | 12794 | 2731 | 205 | .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/tttttesttt.html",
            "relUrl": "/2022/02/19/tttttesttt.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "&#47928;&#51088;&#50676; . &#47928;&#51088;&#50676; &#50741;&#49496; . - 예제1: 한줄 띄우기 . &#39;나는 n최규빈&#39; . &#39;나는 n최규빈&#39; . print(&#39;나는 n최규빈&#39;) . 나는 최규빈 . – 예제2: 탭 . print(&#39;나는 t최규빈&#39;) . 나는 최규빈 . - 예제3: 이스케이프 . print(&#39;나는 n최규빈&#39;) . 나는 n최규빈 . print(&#39; &#39;) . . print(&#39;나는 &#39;최규빈 &#39;&#39;) . 나는&#39;최규빈&#39; . print(&quot;나는&#39;최규빈&#39;&quot;) . 나는&#39;최규빈&#39; . &#47928;&#51088;&#50676; &#47700;&#49548;&#46300; . .replace() . - 예제1 . S = &#39;spammy&#39; S.replace(&#39;mm&#39;,&#39;xx&#39;) . &#39;spaxxy&#39; . – 예제2 . S = &#39;xxxxSPAMxxxxSPAMxxxx&#39; . S.replace(&#39;SPAM&#39;,&#39;EGGS&#39;) . &#39;xxxxEGGSxxxxEGGSxxxx&#39; . S.replace(&#39;SPAM&#39;,&#39;EGGS&#39;,1) . &#39;xxxxEGGSxxxxSPAMxxxx&#39; . ?S.replace . Signature: S.replace(old, new, count=-1, /) Docstring: Return a copy with all occurrences of substring old replaced by new. count Maximum number of occurrences to replace. -1 (the default value) means replace all occurrences. If the optional argument count is given, only the first count occurrences are replaced. Type: builtin_function_or_method . .find() . – 예제1 . S = &#39;xxxxSPAMxxxxSPAMxxxx&#39; . where=S.find(&#39;SPAM&#39;) . S[where] . &#39;S&#39; . S[:where]+&#39;EGGS&#39;+S[(where+4):] . &#39;xxxxEGGSxxxxSPAMxxxx&#39; . .join() . – 예제1 . &#39;-&#39;.join([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) . &#39;a-b-c&#39; . s=&#39;-&#39; s.join([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) . &#39;a-b-c&#39; . – 예제2 . S=&#39;spammy&#39; . S . &#39;spammy&#39; . S[3:5] . &#39;mm&#39; . S[3:5]=&#39;xx&#39; . TypeError Traceback (most recent call last) &lt;ipython-input-34-84bfa6854842&gt; in &lt;module&gt; -&gt; 1 S[3:5]=&#39;xx&#39; TypeError: &#39;str&#39; object does not support item assignment . mm을 xx로 바꾸고 싶은데 문자열은 불변리스트라서 바꿀 수 없다. . 전략: 문자열을 잠시 가변객체인 리스트로 바꾼뒤 리스트에서 자유롭게 편집하고 그 다음에 다시 문자열로 만들자. . L=list(S) . L . [&#39;s&#39;, &#39;p&#39;, &#39;a&#39;, &#39;m&#39;, &#39;m&#39;, &#39;y&#39;] . L[3:5] . [&#39;m&#39;, &#39;m&#39;] . L[3:5]=[&#39;x&#39;,&#39;x&#39;] . L . [&#39;s&#39;, &#39;p&#39;, &#39;a&#39;, &#39;x&#39;, &#39;x&#39;, &#39;y&#39;] . S=&#39;&#39;.join(L) . S . &#39;spaxxy&#39; . .split(&#39;,&#39;) . – 예제1 . s=&#39;bob,hacker,40&#39; . s.split(&#39;,&#39;) . [&#39;bob&#39;, &#39;hacker&#39;, &#39;40&#39;] . – 예제2 . s= &#39;aaa bbb ccc&#39; . s.split(&#39; &#39;) . [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;] . s.split() . [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;] . s.split? . Signature: s.split(sep=None, maxsplit=-1) Docstring: Return a list of the words in the string, using sep as the delimiter string. sep The delimiter according which to split the string. None (the default value) means split according to any whitespace, and discard empty strings from the result. maxsplit Maximum number of splits to do. -1 (the default value) means no limit. Type: builtin_function_or_method . &#47928;&#51088;&#50676; &#54252;&#47588;&#54021; . &#54364;&#54788;&#49885; (&#47928;&#51088;&#50676;&#50640;&#49436; %&#50672;&#49328;&#51088; &#49324;&#50857;) . - 예제1 . &#39;age: %s&#39; % 39 . &#39;age: 39.234234&#39; . &#39;age: %d&#39; % 39 . &#39;age: 39&#39; . &#39;age: %f&#39; % 39 . &#39;age: 39.000000&#39; . - 예제2 . &#39;addr: %s to %s&#39; % (&#39;seoul&#39;,&#39;jeonju&#39;) . &#39;addr: seoul to jeonju&#39; . 잘못된 사용예시1 . &#39;addr: %s to %s&#39; % [&#39;seoul&#39;,&#39;jeonju&#39;] . TypeError Traceback (most recent call last) &lt;ipython-input-59-8a70b358fe3b&gt; in &lt;module&gt; -&gt; 1 &#39;addr: %s to %s&#39; % [&#39;seoul&#39;,&#39;jeonju&#39;] TypeError: not enough arguments for format string . 잘못된 사용예시2 . &#39;addr: %s to %s&#39; % &#39;seoul&#39;,&#39;jeonju&#39; . TypeError Traceback (most recent call last) &lt;ipython-input-60-0c8ecede52e2&gt; in &lt;module&gt; -&gt; 1 &#39;addr: %s to %s&#39; % &#39;seoul&#39;,&#39;jeonju&#39; TypeError: not enough arguments for format string . &#39;addr: %s to %s&#39; . str . % 연산자는 왼쪽에 문자열 오브젝트, 그리고 오른쪽에는 명시적인 튜플이 있어야 연산이 진행된다. . 연산자라는 포인트를 이해하면 아래와 같은 문법도 가능함을 알 수 있다. . s = &#39;addr: %s to %s&#39; s % (&#39;seoul&#39;,&#39;jeonju&#39;) . &#39;addr: seoul to jeonju&#39; . &#46357;&#49492;&#45320;&#47532; &#44592;&#48152; &#54252;&#47588;&#54021; . - 예제1 . &#39;여기 %(food1)s 1개, %(food2)s 1개 주문이요&#39; % {&#39;food1&#39;:&#39;짜장면&#39;,&#39;food2&#39;:&#39;짬뽕&#39;} . &#39;여기 짜장면 1개, 짬뽕 1개 주문이요&#39; . &#39;여기 %(food1)s 1개, %(food2)s 1개 주문이요, 아.. 아니다. %(food1)s은 취소하고 그냥 %(food2)s 두개 주세요&#39; % {&#39;food1&#39;:&#39;짜장면&#39;,&#39;food2&#39;:&#39;짬뽕&#39;} . &#39;여기 짜장면 1개, 짬뽕 1개 주문이요, 아.. 아니다. 짜장면은 취소하고 그냥 짬뽕 두개 주세요&#39; . - 예제2 . mail=&#39;%(studentname)s 학생 안녕하세요 n저는 통계학과 최규빈 교수 입니다. n전공설계과목 지침에 따라 %(studentname)s학생과 2회 상담을 실시해야 합니다. n저는 %(day)s에 시간이 괜찮은데 %(studentname)s 학생도 그날 시간이 괜찮을까요? n&#39; . print(mail % {&#39;studentname&#39;:&#39;박혜원&#39;, &#39;day&#39;:&#39;5월31일&#39;}) . 박혜원 학생 안녕하세요 저는 통계학과 최규빈 교수 입니다. 전공설계과목 지침에 따라 박혜원학생과 2회 상담을 실시해야 합니다. 저는 5월31일에 시간이 괜찮은데 박혜원 학생도 그날 시간이 괜찮을까요? . print(mail % {&#39;studentname&#39;:&#39;강호동&#39;, &#39;day&#39;:&#39;6월3일&#39;}) . 강호동 학생 안녕하세요 저는 통계학과 최규빈 교수 입니다. 전공설계과목 지침에 따라 강호동학생과 2회 상담을 실시해야 합니다. 저는 6월3일에 시간이 괜찮은데 강호동 학생도 그날 시간이 괜찮을까요? . - 예제3 . import pandas as pd df=pd.DataFrame({&#39;studentname&#39;:[&#39;박혜원&#39;,&#39;강호동&#39;],&#39;day&#39;:[&#39;5월31일&#39;,&#39;6월3일&#39;]}) df . studentname day . 0 박혜원 | 5월31일 | . 1 강호동 | 6월3일 | . for i in [0,1]: print(mail % dict(df.iloc[i])) . 박혜원 학생 안녕하세요 저는 통계학과 최규빈 교수 입니다. 전공설계과목 지침에 따라 박혜원학생과 2회 상담을 실시해야 합니다. 저는 5월31일에 시간이 괜찮은데 박혜원 학생도 그날 시간이 괜찮을까요? 강호동 학생 안녕하세요 저는 통계학과 최규빈 교수 입니다. 전공설계과목 지침에 따라 강호동학생과 2회 상담을 실시해야 합니다. 저는 6월3일에 시간이 괜찮은데 강호동 학생도 그날 시간이 괜찮을까요? . &#47700;&#49436;&#46300; . - 예제1 . mail=&#39;{studentname} 학생 안녕하세요 n저는 통계학과 최규빈 교수 입니다. n전공설계과목 지침에 따라 {studentname}학생과 2회 상담을 실시해야 합니다. n저는 {day}에 시간이 괜찮은데 {studentname} 학생도 그날 시간이 괜찮을까요? n&#39; . mail.format(studentname=&#39;박혜원&#39;,day=&#39;6월2일&#39;) . &#39;박혜원 학생 안녕하세요 n저는 통계학과 최규빈 교수 입니다. n전공설계과목 지침에 따라 박혜원학생과 2회 상담을 실시해야 합니다. n저는 6월2일에 시간이 괜찮은데 박혜원 학생도 그날 시간이 괜찮을까요? n&#39; . print(mail.format(studentname=&#39;박혜원&#39;,day=&#39;6월2일&#39;)) . 박혜원 학생 안녕하세요 저는 통계학과 최규빈 교수 입니다. 전공설계과목 지침에 따라 박혜원학생과 2회 상담을 실시해야 합니다. 저는 6월2일에 시간이 괜찮은데 박혜원 학생도 그날 시간이 괜찮을까요? . – 예제2 . &#39;이름:{},나이:{},성별:{}&#39;.format(&#39;최규빈&#39;,&#39;39&#39;,&#39;남&#39;) . &#39;이름:최규빈,나이:39,성병:남&#39; . 숙제: &#39;이름:{},나이:{},성별:{}&#39;.format(&#39;최규빈&#39;,&#39;39&#39;,&#39;남&#39;) 를 자기정보로 바꾸어 제출 .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/note9_0531(1).html",
            "relUrl": "/2022/02/19/note9_0531(1).html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "&#54028;&#51060;&#50028;&#51012; &#49892;&#54665;&#54616;&#45716; &#48169;&#48277; . &#48169;&#48277;1: &#49884;&#49828;&#53596; &#47749;&#47161;&#46972;&#51064; . (1) 실행할 내용을 메모장에 적는다. 예를들어서 . a=[1,2,3] a=a+[4,5] print(a) . 와 같은 내용을 적는다. . (2) 파일이름을 test.py로 만든다. . (3) 커맨드에서 아래를 입력한다. . (py38r40) cgb@cgb-All-Series:~/Desktop$ python test.py [1, 2, 3, 4, 5] . &#48169;&#48277;2: &#45824;&#54868;&#54805; &#54532;&#47212;&#54532;&#53944; (python, ipython) &#54876;&#50857; . - 시스템 명령라인에서 python을 입력한뒤에 파이썬콘솔이 나오면 그곳에서 코드를 입력하고 실행 . (py38r40) cgb@cgb-All-Series:~/Desktop$ python Python 3.8.5 (default, Sep 4 2020, 07:30:14) [GCC 7.3.0] :: Anaconda, Inc. on linux Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. . &gt;&gt;&gt; a=[1,2,3] &gt;&gt;&gt; a [1, 2, 3] &gt;&gt;&gt; a+[1,2] [1, 2, 3, 1, 2] &gt;&gt;&gt; &#39;spam&#39;*4 &#39;spamspamspamspam&#39; . - 장점? . print를 하지 않아도 결과를 바로바로 확인가능 (디버깅, 테스트에 극도로 유리함) | 남의 코드를 빠르게 배울 수 있다. | . - 단점? . 코드를 실행하는 순간 사라진다. $ to$ 그냥 test.py 쓰는것이 좋은것 같기도하다. | . &#48169;&#48277;3: &#47784;&#46280;&#54876;&#50857; . - 대화형 프롬프트 (파이썬 콘솔)에서 . import test . 를 치면 해결된다. . &#48169;&#48277;4: exec . - test.py의 코드를 조금 수정하고 실행하고 싶다. . - 방법3으로는 한계점이 있음. (import는 한번만 수행되므로) . - 그냥 복사해서 붙여넣는 정도의 기능이 있으면 좋겠다. $ to$ open, read, exec 조합으로 해결가능 . &gt;&gt;&gt; exec(open(&#39;test.py&#39;).read()) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] . - 심지어 그냥 test.txt로 저장한뒤 실행해도 가능함. . &gt;&gt;&gt; exec(open(&#39;test.txt&#39;).read()) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] . IDE . – 통합개발환경 (IDE) . 주피터노트북 | 주피터랩 | 파이참 | 스파이더 | 비주얼스튜디오 | IDLE | . 어떻게 파이썬을 쓰는지에 대한 정답은 없습니다. .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/note8_0526.html",
            "relUrl": "/2022/02/19/note8_0526.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "7. Class 고급",
            "content": "&#53364;&#47000;&#49828;, &#51064;&#49828;&#53556;&#49828;, &#50724;&#48652;&#51229;&#53944; . - 오브젝트 . 클래스 오브젝트 | 인스턴스 오브젝트 | . - 클래스 (=클래스 오브젝트) . - 인스턴스 (=인스턴스 오브젝트) . &#53364;&#47000;&#49828; &#49549;&#49457; vs &#51064;&#49828;&#53556;&#49828; &#49549;&#49457; . &#50696;&#51228;1 . class Testclass1: x=0 y=0 def my_print(self): self.x += 1 Testclass1.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) . f=Testclass1 . a=Testclass1() . b=f() . a.my_print() . b.my_print() . b.my_print() . a.my_print() . a.my_print() . - 신기한점: 각 인스턴스에서 instance.my_print()를 실행한 횟수를 서로 공유하는 듯 하다. . &#48516;&#49437; . - 코드를 시점별로 분석해보자. . - 분석을 위해서 커널을 재시작한다. . [시점1]: Testclass1를 선언하는 시점 . class Testclass1: x=0 y=0 def my_print(self): self.x += 1 Testclass1.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) . dir(Testclass1) . [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;my_print&#39;, &#39;x&#39;, &#39;y&#39;] . dir(a) . NameError Traceback (most recent call last) &lt;ipython-input-8-3af1c875b71a&gt; in &lt;module&gt; -&gt; 1 dir(a) NameError: name &#39;a&#39; is not defined . dir(b) . NameError Traceback (most recent call last) &lt;ipython-input-9-35660f044d44&gt; in &lt;module&gt; -&gt; 1 dir(b) NameError: name &#39;b&#39; is not defined . – 이 시점에는 Testclass1만이 존재한다. Testclass1를 바로 클래스 오브젝트라고 부름. . Testclass1.x . 0 . Testclass1.y . 0 . – 현재시점에서는 클래스 오브젝트의 수 1개, 인스턴스 오브젝트의 수 0개, 따라서 총 오브젝트 수는 1개임. . [시점2] 클래스에 별칭을 지정하는 시점 . f=Testclass1 . f.x . 0 . f.y . 0 . Testclass1.x . 0 . Testclass1.y . 0 . – 이 시점에서 클래스 오브젝트는 2개가 있는 것 처럼 보인다. . - 그렇다면 이 2개의 클래스 오브젝트는 컴퓨터의 어딘가에 저장이 되어 있을 것이다. . - 구체적으로는 메모리에 저장되어있을것. . - 2개의 클래스오브젝트는 서로 다른 메모리 공간에 저장되어 있을것이다. . - 진짜인가? 확인해보자. id()는 오브젝트(클래스 오브젝트, 인스턴스 오브젝트)가 저장된 메모리 주소를 확인하는 명령어이다. . id(f) . 93967322676384 . – f라는 오브젝트는 93967322676384 메모리에 저장되어 있다. . id(Testclass1) . 93967322676384 . - 어? 그런데 Testclass1의 오브젝트 역시 93967322676384 메모리에 저장되어 있다. . - 추론: 사실 93967322676384라는 메모리공간에 저장된 어떠한 것은 동일한데, 그것을 어떤사람은 Testclass1 이라고 부르고 어떤사람은 f라고 부른다. . - 이는 마치 별명이랑 비슷하다. 나라는 오브젝트를 어떤사람은 최규빈이라고 부르고, 어떤사람은 팬더라고 부른다. 부르는 이름이 2개라고 해서 나라는 오브젝트가 2개가 있는것은 아니다. . - 결국 이 시점에서 클래스 오브젝트의 수는 여전히 1개라고 볼 수 있다. (인스턴스 오브젝트의 수는 0개) . [시점3]: 클래스 오브젝트로부터 인스턴스 오브젝트를 만드는 시점 . a=Testclass1() b=f() . id(Testclass1),id(f),id(a),id(b) . (93967322676384, 93967322676384, 139694857660688, 139694848860656) . – 이 순간에는 클래스 오브젝트 1개, 인스턴스 오브젝트 2개 존재한다. 즉 총 3개의 오브젝트가 존재한다. . - 메모리주소 93967322676384 에 존재하는 오브젝트는 클래스 오브젝트이며 Testclass1 또는 f 라고 불린다. . - 메모리주소 139694857660688 에 존재하는 오브젝트는 인스턴스 오브젝트이며 a라고 불린다. . - 메모리주소 139694848860656 에 존재하는 오브젝트는 인스턴스 오브젝트이며 b라고 불린다. . Testclass1.x, Testclass1.y . (0, 0) . f.x,f.y . (0, 0) . a.x,a.y . (0, 0) . b.x,b.y . (0, 0) . [시점4] . a.my_print() . 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 1 회 출력 . (f.x,f.y),(a.x,a.y),(b.x,b.y) . ((0, 1), (1, 1), (0, 1)) . - 특징 . a.my_print()를 실행하면 a.x 의 값이 1이 증가한다. | a.my_print()를 실행하면 f.y, a.y, b.y 의 값이 동시에 1이 증가한다. (공유가 되는 느낌) | . [시점5] . b.my_print() . 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 2 회 출력 . (f.x,f.y),(a.x,a.y),(b.x,b.y) . ((0, 2), (1, 2), (1, 2)) . [시점6] . b.my_print() . 현재 인스턴스에서 2 회 출력 전체 인스턴스에서 총 3 회 출력 . (f.x,f.y),(a.x,a.y),(b.x,b.y) . ((0, 3), (1, 3), (2, 3)) . [시점7] . a.my_print() . 현재 인스턴스에서 2 회 출력 전체 인스턴스에서 총 4 회 출력 . (f.x,f.y),(a.x,a.y),(b.x,b.y) . ((0, 4), (2, 4), (2, 4)) . [시점8] . a.my_print() . 현재 인스턴스에서 3 회 출력 전체 인스턴스에서 총 5 회 출력 . (f.x,f.y),(a.x,a.y),(b.x,b.y) . ((0, 5), (3, 5), (2, 5)) . &#50696;&#51228;2 . - 아래처럼 코드를 바꿔도 잘 동작할것 같다. . class Testclass2: def __init__(self): self.x=0 self.y=0 def my_print(self): self.x += 1 Testclass2.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) . c=Testclass2() . c.my_print() . AttributeError Traceback (most recent call last) &lt;ipython-input-51-5500abb1215d&gt; in &lt;module&gt; -&gt; 1 c.my_print() &lt;ipython-input-46-72dbe3bd77f6&gt; in my_print(self) 5 def my_print(self): 6 self.x += 1 -&gt; 7 Testclass2.y +=1 8 print(&#34;현재 인스턴스에서 %s 회 출력&#34; % self.x) 9 print(&#34;전체 인스턴스에서 총 %s 회 출력&#34; % self.y) AttributeError: type object &#39;Testclass2&#39; has no attribute &#39;y&#39; . – 왜 에러가 나는가? . dir(Testclass2) . [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;my_print&#39;] . dir(Testclass1) . [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;my_print&#39;, &#39;x&#39;, &#39;y&#39;] . - 관찰1: Testclass2에서는 Testclass1과는 다르게 x,y가 없다. . dir(c) . [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;my_print&#39;, &#39;x&#39;, &#39;y&#39;] . – 관찰2: 그런데 c라는 인스턴스 오브젝트에서는 x,y가 있다. . - 추론: __init__함수는 클래스 오브젝트가 만들어지는 시점에서는 실행되지 않고, 인스텐스 오브젝트가 만들어지는 시점에 실행된다. . - 결국 __init__함수의 역할은 클래스 오브젝트에서 인스턴스 오브젝트를 만든후에 초기화를 위해서 실행하는 어떠한 일련의 명령들을 묶어놓은 것에 불과하다. . – 즉 위의 코드는 굳이 따지면 아래를 실행한 것과 동일하다. . class Testclass2: # def __init__(self): # self.x=0 # self.y=0 def my_print(self): self.x += 1 Testclass2.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) . c=Testclass2() . c.x=0 c.y=0 . - 이 상황에서 . c.my_print() . 를 실행하면 . c.x += 1 Testclass2.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % c.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % c.y) . 이 실행되는데, 이때 Testclass2.y 이 정의되어 있지 않으므로 . Testclass2.y +=1 . 에서 에러가 난다. . c.my_print() . AttributeError Traceback (most recent call last) &lt;ipython-input-63-5500abb1215d&gt; in &lt;module&gt; -&gt; 1 c.my_print() &lt;ipython-input-55-66666a70bf33&gt; in my_print(self) 5 def my_print(self): 6 self.x += 1 -&gt; 7 Testclass2.y +=1 8 print(&#34;현재 인스턴스에서 %s 회 출력&#34; % self.x) 9 print(&#34;전체 인스턴스에서 총 %s 회 출력&#34; % self.y) AttributeError: type object &#39;Testclass2&#39; has no attribute &#39;y&#39; . &#50696;&#51228; 3 . - 그렇다면 아래와 같이 수정하면 어떨까? . class Testclass3: def __init__(self): self.x=0 Testclass3.y=0 def my_print(self): self.x += 1 Testclass3.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) . a=Testclass3() b=Testclass3() . a.my_print() . 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 1 회 출력 . b.my_print() . 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 2 회 출력 . a.my_print() . 현재 인스턴스에서 2 회 출력 전체 인스턴스에서 총 3 회 출력 . a.my_print() . 현재 인스턴스에서 3 회 출력 전체 인스턴스에서 총 4 회 출력 . b.my_print() . 현재 인스턴스에서 2 회 출력 전체 인스턴스에서 총 5 회 출력 . b.my_print() . 현재 인스턴스에서 3 회 출력 전체 인스턴스에서 총 6 회 출력 . – Testclass1과 동일한 기능이 수행되는것 같다. . - 그런데 조금만 생각해보면 엉터리라는 것을 알 수 있다. 아래의 코드를 관찰하여보자. . class Testclass3: def __init__(self): self.x=0 Testclass3.y=0 def my_print(self): self.x += 1 Testclass3.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) a=Testclass3() a.my_print() a.my_print() b=Testclass3() b.my_print() . 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 1 회 출력 현재 인스턴스에서 2 회 출력 전체 인스턴스에서 총 2 회 출력 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 1 회 출력 . - Testclass3는 인스턴스를 생성할때마다 y=0이 설정된다. 그래서 . b=Testclass3() . 이 시점에서 의도하지 않게 &#39;전체 인스턴스에서 출력된 횟수&#39;를 의미하는 y가 초기화되었다. . - 코드는 엉터리이지만, Testclass3은 의외로 분석할만한 가치가 있다. 특히 위의 실행결과를 시점별로 Testclass1과 비교해보면 재미있다. . - Testclass1 . ### Testclass1 ## 시점1: 클래스 오브젝트 생성 class Testclass1: x=0 y=0 def my_print(self): self.x += 1 Testclass1.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) ## 시점2: 인스턴스 오브젝트 a를 생성 a=Testclass1() ## 시점3: a에서 메소드 실행 a.my_print() ## 시점4: a에서 메소드를 한번 더 실행 a.my_print() ## 시점5: 인스턴스 오브젝트 b를 생성 b=Testclass1() ## 시점6: b에서 메소드를 실행 b.my_print() . 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 1 회 출력 현재 인스턴스에서 2 회 출력 전체 인스턴스에서 총 2 회 출력 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 3 회 출력 . 시점1 시점2 시점3 시점4 시점5 시점6 . Testclass1.x | 0 | 0 | 0 | 0 | 0 | 0 | . Testclass1.y | 0 | 0 | 1 | 2 | 2 | 3 | . a.x | 값없음 | 0 | 1 | 2 | 2 | 2 | . a.y | 값없음 | 0 | 1 | 2 | 2 | 3 | . b.x | 값없음 | 값없음 | 값없음 | 값없음 | 0 | 1 | . b.y | 값없음 | 값없음 | 값없음 | 값없음 | 2 | 3 | . – Testclass3 . #### Testclass3 ## 시점1: 클래스 오브젝트 생성 class Testclass3: def __init__(self): self.x=0 Testclass3.y=0 def my_print(self): self.x += 1 Testclass3.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) ## 시점2: 인스턴스 오브젝트 a를 생성 a=Testclass3() ## 시점3: a에서 메소드 실행 a.my_print() ## 시점4: a에서 메소드를 한번 더 실행 a.my_print() ## 시점5: 인스턴스 오브젝트 b를 생성 b=Testclass3() ## 시점6: b에서 메소드를 실행 b.my_print() . 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 1 회 출력 현재 인스턴스에서 2 회 출력 전체 인스턴스에서 총 2 회 출력 현재 인스턴스에서 1 회 출력 전체 인스턴스에서 총 1 회 출력 . 시점1 시점2 시점3 시점4 시점5 시점6 . Testclass3.x | 값없음 | 값없음 | 값없음 | 값없음 | 값없음 | 값없음 | . Testclass3.y | 값없음 | 0 | 1 | 2 | 0 | 1 | . a.x | 값없음 | 0 | 1 | 2 | 2 | 2 | . a.y | 값없음 | 0 | 1 | 2 | 0 | 1 | . b.x | 값없음 | 값없음 | 값없음 | 값없음 | 0 | 1 | . b.y | 값없음 | 값없음 | 값없음 | 값없음 | 0 | 1 | . – Testclass3.y가 업데이트 되면 a.y, b.y도 자동으로 업데이트 된다. . 숙제: . #### Testclass3 ## 시점1: 클래스 오브젝트 생성 class Testclass3: y=0 def __init__(self): self.x=0 def my_print(self): self.x += 1 Testclass3.y +=1 print(&quot;현재 인스턴스에서 %s 회 출력&quot; % self.x) print(&quot;전체 인스턴스에서 총 %s 회 출력&quot; % self.y) ## 시점2: 인스턴스 오브젝트 a를 생성 a=Testclass3() ## 시점3: a에서 메소드 실행 a.my_print() ## 시점4: a에서 메소드를 한번 더 실행 a.my_print() ## 시점5: 인스턴스 오브젝트 b를 생성 b=Testclass3() ## 시점6: b에서 메소드를 실행 b.my_print() . 시점1 시점2 시점3 시점4 시점5 시점6 . Testclass3.x | | | | | | | . Testclass3.y | | | | | | | . a.x | | | | | | | . a.y | | | | | | | . b.x | | | | | | | . b.y | | | | | | | . &#45348;&#51076;&#49828;&#54168;&#51060;&#49828; . &#50696;&#51228;1 . - 아래의 코드를 관찰하라. . class Testclass1: x=0 . Testclass1.x . 0 . a=Testclass1() . a.x . 0 . – Testclass1.x를 수정하면 a.x가 강제로 수정된다. . Testclass1.x=100 . a.x . 100 . - a.x를 수정한다고 하여 Testclass1.x가 강제로 수정되는 것은 아님 . a.x=200 . Testclass1.x . 100 . a.x . 200 . - 이건 왜이러지? . Testclass1.x=300 . a.x . 200 . - 아래의 상황과 비슷하다. . x=39 def nextyear(): y=x+1 print(x,y) nextyear() . 39 40 . x=39 def nextyear(): y=x+1 print(x,y) x=0 nextyear() . UnboundLocalError Traceback (most recent call last) &lt;ipython-input-29-9c5d2bc270db&gt; in &lt;module&gt; 5 print(x,y) 6 x=0 -&gt; 7 nextyear() &lt;ipython-input-29-9c5d2bc270db&gt; in nextyear() 2 x=39 3 def nextyear(): -&gt; 4 y=x+1 5 print(x,y) 6 x=0 UnboundLocalError: local variable &#39;x&#39; referenced before assignment . – [code1]은 잘 실행되던 코드다. . - [code2]는 실행안되는 코드다. . - [code2]와 [code1]의 차이점은 x=0이라는 코드가 추가로 포함되었는지 유무다. . – (헛소리) x=0 이 잘못된 코드다!! 이걸 실행하는 과정에서 문제가 생겼다!! . - (올바른소리) code1에서는 x는 global variable, code2에서는 x가 local variable 이라서 생기는 문제점이다. . x=39 def nextyear(): x=0 y=x+1 print(x,y) nextyear() . 0 1 . x . 39 . – 다시 우리의 예제로 돌아오자. . ### 시점1 class Testclass1: x=0 ### 시점2 a=Testclass1() ### 시점3 Testclass1.x=100 ### 시점4 a.x=200 ### 시점5 Testclass1.x=300 . 시점1 시점2 시점3 시점4 시점5 . Testclass1.x | 0 | 0 | 100 | 100 | 300 | . a.x | 값없음 | 0 | 100 | 200 | 200 | . a.x의 속성 | - | class | class | instance | instance | . – a.x가 클래스로부터 물려받은 속성인지 (그래서 클래스와 연결되어있는지) 아니면 instance가 독자적으로 가지고 있는 속성인지 어떻게 알 수 있을까? . class Testclass1: x=0 print(&#39;시점1&#39;,Testclass1.x) ### 시점2 a=Testclass1() print(&#39;시점2&#39;,Testclass1.x,a.x,a.__dict__) ### 시점3 Testclass1.x=100 print(&#39;시점3&#39;,Testclass1.x,a.x,a.__dict__) ### 시점4 a.x=200 print(&#39;시점4&#39;,Testclass1.x,a.x,a.__dict__) ### 시점5 Testclass1.x=300 print(&#39;시점5&#39;,Testclass1.x,a.x,a.__dict__) . 시점1 0 시점2 0 0 {} 시점3 100 100 {} 시점4 100 200 {&#39;x&#39;: 200} 시점5 300 200 {&#39;x&#39;: 200} . &#50696;&#51228;2 . x=11 ## 전역변수 ... A def f(): x=22 ## 함수 f안에 설정된 지역변수 print(x) ## 전역에 x=11 있지만 함수안에 x=22가 있으므로 x=22를 사용. --&gt; 22출력됨 def g(): print(x) ## 함수 g안에 x를 찾아봤는데 없음 --&gt; 전역에서 x를 찾음 --&gt; x=11 --&gt; 11출력함. class Testclass2: x=33 ## 클래스 변수 ... B def m1(self): x=44 ## 메소드 변수 ... C def m2(self): self.x=44 ## 인스턴스 변수 ... D . - 결과를 관찰하고 해석해보자. . print(x) . 11 . . Note: 전역변수 출력 . f() . 22 . . Note: f에서 설정된 지역변수 22가 출력됨 . x . 11 . . Note: f내의 지역변수를 사용하여도 전역변수는 변하지 않음. (함수내부에서 선언된 x=22는 함수외부에 영향을 주지못함) . g() . 11 . . Note: g에서 설정된 지역변수가 따로 없으므로 전역변수 출력 . x,Testclass2.x . (11, 33) . . Note: 전역변수 x와 클래스오브젝트에 설정된 변수 x . a=Testclass2() (x,Testclass2.x,a.x),a.__dict__ . ((11, 33, 33), {}) . . Note: 전역변수, 클래스 오브젝트내의 변수, 인스턴스내의 변수. a.__dict__의 결과로 보아 인스턴스내의 변수는 클래스 오브젝트내의 변수를 빌려쓰고 있다. . Testclass2.x=200 (x,Testclass2.x,a.x),a.__dict__ . ((11, 200, 200), {}) . . Note: 클래스오브젝트에서 변수를 고치면 인스턴스에 영향을 미침 . a.m1() (x,Testclass2.x,a.x),a.__dict__ . ((11, 200, 200), {}) . . Note: 메소드 m1내에서 선언된 x=44라는 선언은 아무것도 변화시킬수 없음. . a.m2() (x,Testclass2.x,a.x),a.__dict__ . ((11, 200, 44), {&#39;x&#39;: 44}) . . Note: 메소드 m2에 있는 self.x는 결국 a.x라는 의미이고, 이 선언은 클래스오브젝트 내의 변수와 독립적으로 인스턴스오브젝트 내에서 통용되는 변수를 선언하는 것임. 이 선언의 결과는 a.__dict__의 출력결과에서도 확인가능. . Testclass2.x=300 (x,Testclass2.x,a.x),a.__dict__ . ((11, 300, 44), {&#39;x&#39;: 44}) . . Note: 이제는 a.x와 Testclass2.x 는 분리된 상태이므로, Testclass2.x의 값을 바꾸어도 a.x에는 값의 변화가 없음. . - 뭐 어쩌라는 것임? . - 그냥 그렇다는것.. 내용을 모르고 사용한다면 예상하지 못한 오류가 발생할 수 있으므로 조심해서 사용하자. . 숙제: 전역변수(A), 클래스 변수(B), 메소드 변수(C), 인스턴스 변수(D) . 답: A&gt;B&gt;D&gt;C . &#50672;&#49328;&#51088; &#50724;&#48260;&#47196;&#46377; . - 아래의 코드를 관찰하자. . 1+1 . 2 . - 생각해보니까 1은 int class 에서 생성된 인스턴스이다. . - 코드를 관찰하니 instance와 instance를 +라는 연산이 연결하는 형태임. . class Student: def __init__(self,age=20.0,semester=1): self.age=age self.semester=semester def __add__(self,val): # val==0: 휴학 # val==1: 등록 if val==0: self.age=self.age +0.5 elif val==1: self.age=self.age+0.5 self.semester=self.semester+1 return self def __repr__(self): return &#39;나이: %s n학기: %s&#39; % (self.age,self.semester) . guebin=Student() . guebin.age . 20.0 . guebin.semester . 1 . guebin . 나이: 20.0 학기: 1 . guebin+1 . 나이: 20.5 학기: 2 . guebin+0 . 나이: 21.0 학기: 2 . guebin+0+0+0+0+1+0+1 . 나이: 24.5 학기: 4 . - 연산자 오버로드 핵심아이디어 . 클래스가 일반 파이썬 연산을 재정의하는 것 | 여기에서 연산은 단순히 더하기 빼기를 의미하는게 아니라, print(), +, [0] 와 같은 파이썬 내장문법을 모두 포괄하는 개념이라 이해하는 것이 옳다. | . guebin[0] . TypeError Traceback (most recent call last) &lt;ipython-input-192-961de20e3474&gt; in &lt;module&gt; -&gt; 1 guebin[0] TypeError: &#39;Student&#39; object is not subscriptable . class Student2(Student): def __getitem__(self,index): return [self.age,self.semester][index] . hynn=Student2() . hynn+1+1+0+0 . 나이: 22.0 학기: 3 . hynn[0] . 22.0 . hynn[1] . 3 . hynn[:] . [22.0, 3] . - 연산자 오버로딩을 이해하면 파이썬 전반에 대한 이해폭이 넓어진다. . import pandas as pd . df=pd.DataFrame({&#39;age&#39;:[20,21.5],&#39;semester&#39;:[1,2]}) . df.iloc[:,0] . 0 20.0 1 21.5 Name: age, dtype: float64 . &#46020;&#50880;&#47568; &#51089;&#49457;&#48169;&#48277; . - 넘파이의 경우 아래와 같이 도움말이 잘 작성되어 있다. . import numpy as np a=np.array([1,2,3]) a? . Type: ndarray String form: [1 2 3] Length: 3 File: ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/numpy/__init__.py Docstring: &lt;no docstring&gt; Class docstring: ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None) An array object represents a multidimensional, homogeneous array of fixed-size items. An associated data-type object describes the format of each element in the array (its byte-order, how many bytes it occupies in memory, whether it is an integer, a floating point number, or something else, etc.) Arrays should be constructed using `array`, `zeros` or `empty` (refer to the See Also section below). The parameters given here refer to a low-level method (`ndarray(...)`) for instantiating an array. For more information, refer to the `numpy` module and examine the methods and attributes of an array. Parameters - (for the __new__ method; see Notes below) shape : tuple of ints Shape of created array. dtype : data-type, optional Any object that can be interpreted as a numpy data type. buffer : object exposing buffer interface, optional Used to fill the array with data. offset : int, optional Offset of array data in buffer. strides : tuple of ints, optional Strides of data in memory. order : {&#39;C&#39;, &#39;F&#39;}, optional Row-major (C-style) or column-major (Fortran-style) order. Attributes - T : ndarray Transpose of the array. data : buffer The array&#39;s elements, in memory. dtype : dtype object Describes the format of the elements in the array. flags : dict Dictionary containing information related to memory use, e.g., &#39;C_CONTIGUOUS&#39;, &#39;OWNDATA&#39;, &#39;WRITEABLE&#39;, etc. flat : numpy.flatiter object Flattened version of the array as an iterator. The iterator allows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for assignment examples; TODO). imag : ndarray Imaginary part of the array. real : ndarray Real part of the array. size : int Number of elements in the array. itemsize : int The memory use of each array element in bytes. nbytes : int The total number of bytes required to store the array data, i.e., ``itemsize * size``. ndim : int The array&#39;s number of dimensions. shape : tuple of ints Shape of the array. strides : tuple of ints The step-size required to move from one element to the next in memory. For example, a contiguous ``(3, 4)`` array of type ``int16`` in C-order has strides ``(8, 2)``. This implies that to move from element to element in memory requires jumps of 2 bytes. To move from row-to-row, one needs to jump 8 bytes at a time (``2 * 4``). ctypes : ctypes object Class containing properties of the array needed for interaction with ctypes. base : ndarray If the array is a view into another array, that array is its `base` (unless that array is also a view). The `base` array is where the array data is actually stored. See Also -- array : Construct an array. zeros : Create an array, each element of which is zero. empty : Create an array, but leave its allocated memory unchanged (i.e., it contains &#34;garbage&#34;). dtype : Create a data-type. Notes -- There are two modes of creating an array using ``__new__``: 1. If `buffer` is None, then only `shape`, `dtype`, and `order` are used. 2. If `buffer` is an object exposing the buffer interface, then all keywords are interpreted. No ``__init__`` method is needed because the array is fully initialized after the ``__new__`` method. Examples -- These examples illustrate the low-level `ndarray` constructor. Refer to the `See Also` section above for easier ways of constructing an ndarray. First mode, `buffer` is None: &gt;&gt;&gt; np.ndarray(shape=(2,2), dtype=float, order=&#39;F&#39;) array([[0.0e+000, 0.0e+000], # random [ nan, 2.5e-323]]) Second mode: &gt;&gt;&gt; np.ndarray((2,), buffer=np.array([1,2,3]), ... offset=np.int_().itemsize, ... dtype=int) # offset = 1*itemsize, i.e. skip first element array([2, 3]) . - 하지만 우리는? . hynn? . Type: Student2 String form: 나이: 22.0 학기: 3 Docstring: &lt;no docstring&gt; . - 우리도 도움말을 작성하고 싶다. . class Student2(Student): &#39;&#39;&#39; Student2는 Student의 개선 # Student 클래스의 기능 1. 출력기능 (__repr__) 2. 연산기능 (__add__): 학기와 나이를 카운트 Examples -- &gt;&gt;&gt; hynn=Student2() &gt;&gt;&gt; hynn+1 나이: 20.5 학기: 2 # Student2에서 추가된 기능 1. 인덱싱 &#39;&#39;&#39; def __getitem__(self,index): return [self.age,self.semester][index] . hynn=Student2() . hynn? . Type: Student2 String form: 나이: 20.0 학기: 1 Docstring: Student2는 Student의 개선 # Student 클래스의 기능 1. 출력기능 (__repr__) 2. 연산기능 (__add__): 학기와 나이를 카운트 Examples -- &gt;&gt;&gt; hynn=Student2() &gt;&gt;&gt; hynn+1 나이: 20.5 학기: 2 # Student2에서 추가된 기능 1. 인덱싱 . hynn=Student2(21,1) . hynn . 나이: 21 학기: 1 . hynn? . Type: Student2 String form: 나이: 21 학기: 1 Docstring: Student2는 Student의 개선 # Student 클래스의 기능 1. 출력기능 (__repr__) 2. 연산기능 (__add__): 학기와 나이를 카운트 Examples -- &gt;&gt;&gt; hynn=Student2() &gt;&gt;&gt; hynn+1 나이: 20.5 학기: 2 # Student2에서 추가된 기능 1. 인덱싱 . self&#50640; &#45824;&#54620; &#51652;&#49892; . – 사실 이름이 self가 아니어도 된다. . class MooYaHo: def __init__(a): a.text=&#39;mooyaho&#39; . moo1=MooYaHo() . moo1.text . &#39;mooyaho&#39; . – 그런데 self를 많이 쓴다. . 숙제: MooYaHo class의 도움말에 학번을 넣고 출력 .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/note7_0524.html",
            "relUrl": "/2022/02/19/note7_0524.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "데이터시각화 기말고사 2번문제",
            "content": "import numpy as np import pandas as pd import warnings from IPython.display import HTML from pandas_datareader import data as pdr import json import folium import json import requests . df = pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/covid19_20211202.csv&#39;) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 0 누적(명) | 457,612 | 158,774 | 16,555 | 19,114 | 25,299 | 6,353 | 8,809 | 5,675 | 1,588 | 136,546 | 8,889 | 8,942 | 13,174 | 6,453 | 4,498 | 11,471 | 15,236 | 3,762 | 6,474 | . 1 2020-01-20 | 1 | - | - | - | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 2 2020-01-21 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 3 2020-01-22 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 4 2020-01-23 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3,925 | 1,673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1,090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3,308 | 1,393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3,032 | 1,186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5,123 | 2,222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1,582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5,266 | 2,268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1,495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 684 rows × 20 columns . df=df.iloc[1:,:] . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 1 2020-01-20 | 1 | - | - | - | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 2 2020-01-21 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 3 2020-01-22 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 4 2020-01-23 | 0 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . 5 2020-01-24 | 1 | 1 | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3,925 | 1,673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1,090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3,308 | 1,393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3,032 | 1,186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5,123 | 2,222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1,582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5,266 | 2,268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1,495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 683 rows × 20 columns . df[&quot;계(명)&quot;] = df[&quot;계(명)&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True)#, 삭제 df[&quot;서울&quot;]=df[&quot;서울&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;부산&quot;]=df[&quot;부산&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;대구&quot;]=df[&quot;대구&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;인천&quot;]=df[&quot;인천&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;광주&quot;]=df[&quot;광주&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;대전&quot;]=df[&quot;대전&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;울산&quot;]=df[&quot;울산&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;세종&quot;]=df[&quot;세종&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;경기&quot;]=df[&quot;경기&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;강원&quot;]=df[&quot;강원&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;충북&quot;]=df[&quot;충북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;충남&quot;]=df[&quot;충남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;전북&quot;]=df[&quot;전북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;전남&quot;]=df[&quot;전남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;경북&quot;]=df[&quot;경북&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;경남&quot;]=df[&quot;경남&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;제주&quot;]=df[&quot;제주&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) df[&quot;검역&quot;]=df[&quot;검역&quot;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) . &lt;ipython-input-7-252713c7230a&gt;:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;계(명)&#34;] = df[&#34;계(명)&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True)#, 삭제 &lt;ipython-input-7-252713c7230a&gt;:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;서울&#34;]=df[&#34;서울&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;부산&#34;]=df[&#34;부산&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:4: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;대구&#34;]=df[&#34;대구&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:5: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;인천&#34;]=df[&#34;인천&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;광주&#34;]=df[&#34;광주&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;대전&#34;]=df[&#34;대전&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:8: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;울산&#34;]=df[&#34;울산&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:9: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;세종&#34;]=df[&#34;세종&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:10: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;경기&#34;]=df[&#34;경기&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:11: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;강원&#34;]=df[&#34;강원&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:12: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;충북&#34;]=df[&#34;충북&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:13: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;충남&#34;]=df[&#34;충남&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:14: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;전북&#34;]=df[&#34;전북&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:15: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;전남&#34;]=df[&#34;전남&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:16: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;경북&#34;]=df[&#34;경북&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:17: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;경남&#34;]=df[&#34;경남&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:18: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;제주&#34;]=df[&#34;제주&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) &lt;ipython-input-7-252713c7230a&gt;:19: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[&#34;검역&#34;]=df[&#34;검역&#34;].str.replace(pat=r&#39;[^ w]&#39;, repl=r&#39;&#39;, regex=True) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . 1 2020-01-20 | 1 | | | | 1 | | | | | | | | | | | | | | | . 2 2020-01-21 | 0 | | | | | | | | | | | | | | | | | | | . 3 2020-01-22 | 0 | | | | | | | | | | | | | | | | | | | . 4 2020-01-23 | 0 | | | | | | | | | | | | | | | | | | | . 5 2020-01-24 | 1 | 1 | | | | | | | | | | | | | | | | | | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3925 | 1673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | 1090 | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | . 680 2021-11-29 | 3308 | 1393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | 910 | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | . 681 2021-11-30 | 3032 | 1186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | 909 | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | . 682 2021-12-01 | 5123 | 2222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | 1582 | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | . 683 2021-12-02 | 5266 | 2268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | 1495 | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | . 683 rows × 20 columns . def sep_yearmonths(x): x[&#39;month&#39;] = str(x[&#39;일자&#39;])[:-3] return x df = df.apply(sep_yearmonths,axis=1) . df . 일자 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 ... 강원 충북 충남 전북 전남 경북 경남 제주 검역 month . 1 2020-01-20 | 1 | | | | 1 | | | | | ... | | | | | | | | | | 2020-01 | . 2 2020-01-21 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 3 2020-01-22 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 4 2020-01-23 | 0 | | | | | | | | | ... | | | | | | | | | | 2020-01 | . 5 2020-01-24 | 1 | 1 | | | | | | | | ... | | | | | | | | | | 2020-01 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 2021-11-28 | 3925 | 1673 | 148 | 106 | 278 | 52 | 53 | 4 | 5 | ... | 63 | 25 | 121 | 45 | 25 | 103 | 89 | 35 | 10 | 2021-11 | . 680 2021-11-29 | 3308 | 1393 | 144 | 88 | 233 | 61 | 43 | 2 | 15 | ... | 56 | 33 | 52 | 49 | 28 | 68 | 86 | 44 | 3 | 2021-11 | . 681 2021-11-30 | 3032 | 1186 | 79 | 78 | 192 | 52 | 43 | 3 | 22 | ... | 84 | 59 | 81 | 50 | 36 | 68 | 60 | 22 | 8 | 2021-11 | . 682 2021-12-01 | 5123 | 2222 | 143 | 86 | 326 | 29 | 88 | 17 | 20 | ... | 105 | 48 | 96 | 50 | 40 | 97 | 127 | 27 | 20 | 2021-12 | . 683 2021-12-02 | 5266 | 2268 | 158 | 70 | 355 | 39 | 166 | 18 | 8 | ... | 145 | 49 | 149 | 71 | 39 | 106 | 94 | 31 | 5 | 2021-12 | . 683 rows × 21 columns . df1=df.iloc[:,1:] . df1[&quot;계(명)&quot;]=pd.to_numeric(df1[&quot;계(명)&quot;]) df1[&quot;서울&quot;]=pd.to_numeric(df1[&quot;서울&quot;]) df1[&quot;부산&quot;]=pd.to_numeric(df1[&quot;부산&quot;]) df1[&quot;대구&quot;]=pd.to_numeric(df1[&quot;대구&quot;]) df1[&quot;인천&quot;]=pd.to_numeric(df1[&quot;인천&quot;]) df1[&quot;광주&quot;]=pd.to_numeric(df1[&quot;광주&quot;]) df1[&quot;대전&quot;]=pd.to_numeric(df1[&quot;대전&quot;]) df1[&quot;울산&quot;]=pd.to_numeric(df1[&quot;울산&quot;]) df1[&quot;세종&quot;]=pd.to_numeric(df1[&quot;세종&quot;]) df1[&quot;경기&quot;]=pd.to_numeric(df1[&quot;경기&quot;]) df1[&quot;강원&quot;]=pd.to_numeric(df1[&quot;강원&quot;]) df1[&quot;충북&quot;]=pd.to_numeric(df1[&quot;충북&quot;]) df1[&quot;충남&quot;]=pd.to_numeric(df1[&quot;충남&quot;]) df1[&quot;전북&quot;]=pd.to_numeric(df1[&quot;전북&quot;]) df1[&quot;전남&quot;]=pd.to_numeric(df1[&quot;전남&quot;]) df1[&quot;경북&quot;]=pd.to_numeric(df1[&quot;경북&quot;]) df1[&quot;경남&quot;]=pd.to_numeric(df1[&quot;경남&quot;]) df1[&quot;제주&quot;]=pd.to_numeric(df1[&quot;제주&quot;]) df1[&quot;검역&quot;]=pd.to_numeric(df1[&quot;검역&quot;]) . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 month . 1 1 | NaN | NaN | NaN | 1.0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 2 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 3 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 4 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . 5 1 | 1.0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 2020-01 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 3925 | 1673.0 | 148.0 | 106.0 | 278.0 | 52.0 | 53.0 | 4.0 | 5.0 | 1090.0 | 63.0 | 25.0 | 121.0 | 45.0 | 25.0 | 103.0 | 89.0 | 35.0 | 10.0 | 2021-11 | . 680 3308 | 1393.0 | 144.0 | 88.0 | 233.0 | 61.0 | 43.0 | 2.0 | 15.0 | 910.0 | 56.0 | 33.0 | 52.0 | 49.0 | 28.0 | 68.0 | 86.0 | 44.0 | 3.0 | 2021-11 | . 681 3032 | 1186.0 | 79.0 | 78.0 | 192.0 | 52.0 | 43.0 | 3.0 | 22.0 | 909.0 | 84.0 | 59.0 | 81.0 | 50.0 | 36.0 | 68.0 | 60.0 | 22.0 | 8.0 | 2021-11 | . 682 5123 | 2222.0 | 143.0 | 86.0 | 326.0 | 29.0 | 88.0 | 17.0 | 20.0 | 1582.0 | 105.0 | 48.0 | 96.0 | 50.0 | 40.0 | 97.0 | 127.0 | 27.0 | 20.0 | 2021-12 | . 683 5266 | 2268.0 | 158.0 | 70.0 | 355.0 | 39.0 | 166.0 | 18.0 | 8.0 | 1495.0 | 145.0 | 49.0 | 149.0 | 71.0 | 39.0 | 106.0 | 94.0 | 31.0 | 5.0 | 2021-12 | . 683 rows × 20 columns . df1=df1.fillna(0) . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 month . 1 1 | 0.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 2 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 3 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 4 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . 5 1 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2020-01 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 679 3925 | 1673.0 | 148.0 | 106.0 | 278.0 | 52.0 | 53.0 | 4.0 | 5.0 | 1090.0 | 63.0 | 25.0 | 121.0 | 45.0 | 25.0 | 103.0 | 89.0 | 35.0 | 10.0 | 2021-11 | . 680 3308 | 1393.0 | 144.0 | 88.0 | 233.0 | 61.0 | 43.0 | 2.0 | 15.0 | 910.0 | 56.0 | 33.0 | 52.0 | 49.0 | 28.0 | 68.0 | 86.0 | 44.0 | 3.0 | 2021-11 | . 681 3032 | 1186.0 | 79.0 | 78.0 | 192.0 | 52.0 | 43.0 | 3.0 | 22.0 | 909.0 | 84.0 | 59.0 | 81.0 | 50.0 | 36.0 | 68.0 | 60.0 | 22.0 | 8.0 | 2021-11 | . 682 5123 | 2222.0 | 143.0 | 86.0 | 326.0 | 29.0 | 88.0 | 17.0 | 20.0 | 1582.0 | 105.0 | 48.0 | 96.0 | 50.0 | 40.0 | 97.0 | 127.0 | 27.0 | 20.0 | 2021-12 | . 683 5266 | 2268.0 | 158.0 | 70.0 | 355.0 | 39.0 | 166.0 | 18.0 | 8.0 | 1495.0 | 145.0 | 49.0 | 149.0 | 71.0 | 39.0 | 106.0 | 94.0 | 31.0 | 5.0 | 2021-12 | . 683 rows × 20 columns . df1=df1.groupby(by=&#39;month&#39;).agg(&#39;sum&#39;) . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . month . 2020-01 11 | 7.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2020-02 2920 | 67.0 | 75.0 | 2055.0 | 5.0 | 9.0 | 13.0 | 17.0 | 1.0 | 74.0 | 7.0 | 10.0 | 48.0 | 4.0 | 2.0 | 472.0 | 59.0 | 2.0 | 0.0 | . 2020-03 6855 | 376.0 | 44.0 | 4629.0 | 58.0 | 11.0 | 23.0 | 22.0 | 45.0 | 400.0 | 29.0 | 34.0 | 80.0 | 8.0 | 7.0 | 828.0 | 37.0 | 7.0 | 217.0 | . 2020-04 979 | 183.0 | 18.0 | 168.0 | 29.0 | 10.0 | 4.0 | 4.0 | 0.0 | 200.0 | 17.0 | 1.0 | 15.0 | 5.0 | 6.0 | 65.0 | 21.0 | 4.0 | 229.0 | . 2020-05 703 | 228.0 | 10.0 | 31.0 | 113.0 | 2.0 | 6.0 | 9.0 | 1.0 | 164.0 | 4.0 | 15.0 | 3.0 | 3.0 | 4.0 | 14.0 | 6.0 | 2.0 | 88.0 | . 2020-06 1331 | 451.0 | 7.0 | 23.0 | 135.0 | 12.0 | 71.0 | 3.0 | 3.0 | 367.0 | 8.0 | 4.0 | 21.0 | 6.0 | 5.0 | 10.0 | 11.0 | 4.0 | 190.0 | . 2020-07 1506 | 288.0 | 17.0 | 34.0 | 42.0 | 160.0 | 49.0 | 4.0 | 0.0 | 339.0 | 9.0 | 9.0 | 23.0 | 12.0 | 14.0 | 12.0 | 25.0 | 7.0 | 462.0 | . 2020-08 5641 | 2268.0 | 130.0 | 107.0 | 333.0 | 170.0 | 90.0 | 30.0 | 17.0 | 1714.0 | 115.0 | 55.0 | 142.0 | 48.0 | 104.0 | 54.0 | 77.0 | 19.0 | 168.0 | . 2020-09 3865 | 1425.0 | 120.0 | 85.0 | 200.0 | 121.0 | 104.0 | 58.0 | 9.0 | 1123.0 | 35.0 | 43.0 | 152.0 | 41.0 | 27.0 | 96.0 | 55.0 | 14.0 | 157.0 | . 2020-10 2700 | 718.0 | 171.0 | 42.0 | 129.0 | 16.0 | 82.0 | 16.0 | 6.0 | 1020.0 | 55.0 | 18.0 | 57.0 | 38.0 | 16.0 | 36.0 | 25.0 | 0.0 | 255.0 | . 2020-11 7688 | 2800.0 | 217.0 | 58.0 | 364.0 | 185.0 | 52.0 | 35.0 | 18.0 | 1874.0 | 373.0 | 138.0 | 358.0 | 168.0 | 239.0 | 117.0 | 309.0 | 21.0 | 362.0 | . 2020-12 26527 | 10184.0 | 1058.0 | 569.0 | 1430.0 | 385.0 | 351.0 | 475.0 | 49.0 | 7173.0 | 555.0 | 836.0 | 754.0 | 503.0 | 136.0 | 720.0 | 700.0 | 336.0 | 313.0 | . 2021-01 17471 | 5160.0 | 889.0 | 507.0 | 974.0 | 702.0 | 252.0 | 264.0 | 47.0 | 5353.0 | 488.0 | 411.0 | 363.0 | 202.0 | 189.0 | 593.0 | 686.0 | 106.0 | 285.0 | . 2021-02 11467 | 4080.0 | 466.0 | 315.0 | 618.0 | 301.0 | 93.0 | 76.0 | 30.0 | 3747.0 | 169.0 | 182.0 | 428.0 | 152.0 | 110.0 | 236.0 | 172.0 | 48.0 | 244.0 | . 2021-03 13415 | 3794.0 | 583.0 | 304.0 | 627.0 | 125.0 | 96.0 | 141.0 | 44.0 | 5029.0 | 466.0 | 434.0 | 187.0 | 260.0 | 54.0 | 251.0 | 777.0 | 55.0 | 188.0 | . 2021-04 18927 | 5807.0 | 1244.0 | 424.0 | 607.0 | 200.0 | 444.0 | 725.0 | 87.0 | 5617.0 | 354.0 | 438.0 | 402.0 | 485.0 | 140.0 | 606.0 | 955.0 | 82.0 | 310.0 | . 2021-05 18331 | 6078.0 | 619.0 | 565.0 | 533.0 | 396.0 | 348.0 | 699.0 | 123.0 | 4885.0 | 501.0 | 315.0 | 505.0 | 289.0 | 410.0 | 582.0 | 784.0 | 323.0 | 376.0 | . 2021-06 16623 | 6072.0 | 553.0 | 682.0 | 569.0 | 132.0 | 573.0 | 246.0 | 80.0 | 4978.0 | 374.0 | 363.0 | 266.0 | 139.0 | 185.0 | 257.0 | 548.0 | 234.0 | 372.0 | . 2021-07 41374 | 14364.0 | 1985.0 | 1071.0 | 2293.0 | 462.0 | 1538.0 | 382.0 | 176.0 | 11721.0 | 934.0 | 544.0 | 1142.0 | 403.0 | 387.0 | 507.0 | 1956.0 | 468.0 | 1041.0 | . 2021-08 53077 | 15001.0 | 3180.0 | 1977.0 | 2767.0 | 654.0 | 1458.0 | 969.0 | 257.0 | 15298.0 | 967.0 | 1302.0 | 1991.0 | 821.0 | 565.0 | 1644.0 | 2777.0 | 870.0 | 579.0 | . 2021-09 59860 | 21134.0 | 1335.0 | 1853.0 | 3975.0 | 936.0 | 1338.0 | 990.0 | 246.0 | 19046.0 | 977.0 | 1192.0 | 2196.0 | 927.0 | 484.0 | 1223.0 | 1480.0 | 273.0 | 255.0 | . 2021-10 53421 | 19107.0 | 1190.0 | 1643.0 | 3571.0 | 382.0 | 547.0 | 256.0 | 126.0 | 18333.0 | 762.0 | 1556.0 | 1467.0 | 672.0 | 459.0 | 1386.0 | 1548.0 | 225.0 | 191.0 | . 2021-11 82531 | 34692.0 | 2343.0 | 1816.0 | 5245.0 | 914.0 | 1023.0 | 219.0 | 195.0 | 25012.0 | 1440.0 | 945.0 | 2329.0 | 1145.0 | 876.0 | 1559.0 | 2007.0 | 604.0 | 167.0 | . 2021-12 10389 | 4490.0 | 301.0 | 156.0 | 681.0 | 68.0 | 254.0 | 35.0 | 28.0 | 3077.0 | 250.0 | 97.0 | 245.0 | 121.0 | 79.0 | 203.0 | 221.0 | 58.0 | 25.0 | . df1 . 계(명) 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 검역 . month . 2020-01 11 | 7.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2020-02 2920 | 67.0 | 75.0 | 2055.0 | 5.0 | 9.0 | 13.0 | 17.0 | 1.0 | 74.0 | 7.0 | 10.0 | 48.0 | 4.0 | 2.0 | 472.0 | 59.0 | 2.0 | 0.0 | . 2020-03 6855 | 376.0 | 44.0 | 4629.0 | 58.0 | 11.0 | 23.0 | 22.0 | 45.0 | 400.0 | 29.0 | 34.0 | 80.0 | 8.0 | 7.0 | 828.0 | 37.0 | 7.0 | 217.0 | . 2020-04 979 | 183.0 | 18.0 | 168.0 | 29.0 | 10.0 | 4.0 | 4.0 | 0.0 | 200.0 | 17.0 | 1.0 | 15.0 | 5.0 | 6.0 | 65.0 | 21.0 | 4.0 | 229.0 | . 2020-05 703 | 228.0 | 10.0 | 31.0 | 113.0 | 2.0 | 6.0 | 9.0 | 1.0 | 164.0 | 4.0 | 15.0 | 3.0 | 3.0 | 4.0 | 14.0 | 6.0 | 2.0 | 88.0 | . 2020-06 1331 | 451.0 | 7.0 | 23.0 | 135.0 | 12.0 | 71.0 | 3.0 | 3.0 | 367.0 | 8.0 | 4.0 | 21.0 | 6.0 | 5.0 | 10.0 | 11.0 | 4.0 | 190.0 | . 2020-07 1506 | 288.0 | 17.0 | 34.0 | 42.0 | 160.0 | 49.0 | 4.0 | 0.0 | 339.0 | 9.0 | 9.0 | 23.0 | 12.0 | 14.0 | 12.0 | 25.0 | 7.0 | 462.0 | . 2020-08 5641 | 2268.0 | 130.0 | 107.0 | 333.0 | 170.0 | 90.0 | 30.0 | 17.0 | 1714.0 | 115.0 | 55.0 | 142.0 | 48.0 | 104.0 | 54.0 | 77.0 | 19.0 | 168.0 | . 2020-09 3865 | 1425.0 | 120.0 | 85.0 | 200.0 | 121.0 | 104.0 | 58.0 | 9.0 | 1123.0 | 35.0 | 43.0 | 152.0 | 41.0 | 27.0 | 96.0 | 55.0 | 14.0 | 157.0 | . 2020-10 2700 | 718.0 | 171.0 | 42.0 | 129.0 | 16.0 | 82.0 | 16.0 | 6.0 | 1020.0 | 55.0 | 18.0 | 57.0 | 38.0 | 16.0 | 36.0 | 25.0 | 0.0 | 255.0 | . 2020-11 7688 | 2800.0 | 217.0 | 58.0 | 364.0 | 185.0 | 52.0 | 35.0 | 18.0 | 1874.0 | 373.0 | 138.0 | 358.0 | 168.0 | 239.0 | 117.0 | 309.0 | 21.0 | 362.0 | . 2020-12 26527 | 10184.0 | 1058.0 | 569.0 | 1430.0 | 385.0 | 351.0 | 475.0 | 49.0 | 7173.0 | 555.0 | 836.0 | 754.0 | 503.0 | 136.0 | 720.0 | 700.0 | 336.0 | 313.0 | . 2021-01 17471 | 5160.0 | 889.0 | 507.0 | 974.0 | 702.0 | 252.0 | 264.0 | 47.0 | 5353.0 | 488.0 | 411.0 | 363.0 | 202.0 | 189.0 | 593.0 | 686.0 | 106.0 | 285.0 | . 2021-02 11467 | 4080.0 | 466.0 | 315.0 | 618.0 | 301.0 | 93.0 | 76.0 | 30.0 | 3747.0 | 169.0 | 182.0 | 428.0 | 152.0 | 110.0 | 236.0 | 172.0 | 48.0 | 244.0 | . 2021-03 13415 | 3794.0 | 583.0 | 304.0 | 627.0 | 125.0 | 96.0 | 141.0 | 44.0 | 5029.0 | 466.0 | 434.0 | 187.0 | 260.0 | 54.0 | 251.0 | 777.0 | 55.0 | 188.0 | . 2021-04 18927 | 5807.0 | 1244.0 | 424.0 | 607.0 | 200.0 | 444.0 | 725.0 | 87.0 | 5617.0 | 354.0 | 438.0 | 402.0 | 485.0 | 140.0 | 606.0 | 955.0 | 82.0 | 310.0 | . 2021-05 18331 | 6078.0 | 619.0 | 565.0 | 533.0 | 396.0 | 348.0 | 699.0 | 123.0 | 4885.0 | 501.0 | 315.0 | 505.0 | 289.0 | 410.0 | 582.0 | 784.0 | 323.0 | 376.0 | . 2021-06 16623 | 6072.0 | 553.0 | 682.0 | 569.0 | 132.0 | 573.0 | 246.0 | 80.0 | 4978.0 | 374.0 | 363.0 | 266.0 | 139.0 | 185.0 | 257.0 | 548.0 | 234.0 | 372.0 | . 2021-07 41374 | 14364.0 | 1985.0 | 1071.0 | 2293.0 | 462.0 | 1538.0 | 382.0 | 176.0 | 11721.0 | 934.0 | 544.0 | 1142.0 | 403.0 | 387.0 | 507.0 | 1956.0 | 468.0 | 1041.0 | . 2021-08 53077 | 15001.0 | 3180.0 | 1977.0 | 2767.0 | 654.0 | 1458.0 | 969.0 | 257.0 | 15298.0 | 967.0 | 1302.0 | 1991.0 | 821.0 | 565.0 | 1644.0 | 2777.0 | 870.0 | 579.0 | . 2021-09 59860 | 21134.0 | 1335.0 | 1853.0 | 3975.0 | 936.0 | 1338.0 | 990.0 | 246.0 | 19046.0 | 977.0 | 1192.0 | 2196.0 | 927.0 | 484.0 | 1223.0 | 1480.0 | 273.0 | 255.0 | . 2021-10 53421 | 19107.0 | 1190.0 | 1643.0 | 3571.0 | 382.0 | 547.0 | 256.0 | 126.0 | 18333.0 | 762.0 | 1556.0 | 1467.0 | 672.0 | 459.0 | 1386.0 | 1548.0 | 225.0 | 191.0 | . 2021-11 82531 | 34692.0 | 2343.0 | 1816.0 | 5245.0 | 914.0 | 1023.0 | 219.0 | 195.0 | 25012.0 | 1440.0 | 945.0 | 2329.0 | 1145.0 | 876.0 | 1559.0 | 2007.0 | 604.0 | 167.0 | . 2021-12 10389 | 4490.0 | 301.0 | 156.0 | 681.0 | 68.0 | 254.0 | 35.0 | 28.0 | 3077.0 | 250.0 | 97.0 | 245.0 | 121.0 | 79.0 | 203.0 | 221.0 | 58.0 | 25.0 | . df1=df1.iloc[12:22,1:18] . df1 . 서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주 . month . 2021-01 5160.0 | 889.0 | 507.0 | 974.0 | 702.0 | 252.0 | 264.0 | 47.0 | 5353.0 | 488.0 | 411.0 | 363.0 | 202.0 | 189.0 | 593.0 | 686.0 | 106.0 | . 2021-02 4080.0 | 466.0 | 315.0 | 618.0 | 301.0 | 93.0 | 76.0 | 30.0 | 3747.0 | 169.0 | 182.0 | 428.0 | 152.0 | 110.0 | 236.0 | 172.0 | 48.0 | . 2021-03 3794.0 | 583.0 | 304.0 | 627.0 | 125.0 | 96.0 | 141.0 | 44.0 | 5029.0 | 466.0 | 434.0 | 187.0 | 260.0 | 54.0 | 251.0 | 777.0 | 55.0 | . 2021-04 5807.0 | 1244.0 | 424.0 | 607.0 | 200.0 | 444.0 | 725.0 | 87.0 | 5617.0 | 354.0 | 438.0 | 402.0 | 485.0 | 140.0 | 606.0 | 955.0 | 82.0 | . 2021-05 6078.0 | 619.0 | 565.0 | 533.0 | 396.0 | 348.0 | 699.0 | 123.0 | 4885.0 | 501.0 | 315.0 | 505.0 | 289.0 | 410.0 | 582.0 | 784.0 | 323.0 | . 2021-06 6072.0 | 553.0 | 682.0 | 569.0 | 132.0 | 573.0 | 246.0 | 80.0 | 4978.0 | 374.0 | 363.0 | 266.0 | 139.0 | 185.0 | 257.0 | 548.0 | 234.0 | . 2021-07 14364.0 | 1985.0 | 1071.0 | 2293.0 | 462.0 | 1538.0 | 382.0 | 176.0 | 11721.0 | 934.0 | 544.0 | 1142.0 | 403.0 | 387.0 | 507.0 | 1956.0 | 468.0 | . 2021-08 15001.0 | 3180.0 | 1977.0 | 2767.0 | 654.0 | 1458.0 | 969.0 | 257.0 | 15298.0 | 967.0 | 1302.0 | 1991.0 | 821.0 | 565.0 | 1644.0 | 2777.0 | 870.0 | . 2021-09 21134.0 | 1335.0 | 1853.0 | 3975.0 | 936.0 | 1338.0 | 990.0 | 246.0 | 19046.0 | 977.0 | 1192.0 | 2196.0 | 927.0 | 484.0 | 1223.0 | 1480.0 | 273.0 | . 2021-10 19107.0 | 1190.0 | 1643.0 | 3571.0 | 382.0 | 547.0 | 256.0 | 126.0 | 18333.0 | 762.0 | 1556.0 | 1467.0 | 672.0 | 459.0 | 1386.0 | 1548.0 | 225.0 | . df2=df1.reset_index().melt(id_vars=&#39;month&#39;) . df2.head(30) . month variable value . 0 2021-01 | 서울 | 5160.0 | . 1 2021-02 | 서울 | 4080.0 | . 2 2021-03 | 서울 | 3794.0 | . 3 2021-04 | 서울 | 5807.0 | . 4 2021-05 | 서울 | 6078.0 | . 5 2021-06 | 서울 | 6072.0 | . 6 2021-07 | 서울 | 14364.0 | . 7 2021-08 | 서울 | 15001.0 | . 8 2021-09 | 서울 | 21134.0 | . 9 2021-10 | 서울 | 19107.0 | . 10 2021-01 | 부산 | 889.0 | . 11 2021-02 | 부산 | 466.0 | . 12 2021-03 | 부산 | 583.0 | . 13 2021-04 | 부산 | 1244.0 | . 14 2021-05 | 부산 | 619.0 | . 15 2021-06 | 부산 | 553.0 | . 16 2021-07 | 부산 | 1985.0 | . 17 2021-08 | 부산 | 3180.0 | . 18 2021-09 | 부산 | 1335.0 | . 19 2021-10 | 부산 | 1190.0 | . 20 2021-01 | 대구 | 507.0 | . 21 2021-02 | 대구 | 315.0 | . 22 2021-03 | 대구 | 304.0 | . 23 2021-04 | 대구 | 424.0 | . 24 2021-05 | 대구 | 565.0 | . 25 2021-06 | 대구 | 682.0 | . 26 2021-07 | 대구 | 1071.0 | . 27 2021-08 | 대구 | 1977.0 | . 28 2021-09 | 대구 | 1853.0 | . 29 2021-10 | 대구 | 1643.0 | . total=pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/2021-11-22-prov.csv&#39;) . total . 행정구역(시군구)별 총인구수 (명) . 0 서울특별시 | 9532428 | . 1 부산광역시 | 3356311 | . 2 대구광역시 | 2390721 | . 3 인천광역시 | 2945009 | . 4 광주광역시 | 1442454 | . 5 대전광역시 | 1454228 | . 6 울산광역시 | 1122566 | . 7 세종특별자치시 | 368276 | . 8 경기도 | 13549577 | . 9 강원도 | 1537717 | . 10 충청북도 | 1596948 | . 11 충청남도 | 2118977 | . 12 전라북도 | 1789770 | . 13 전라남도 | 1834653 | . 14 경상북도 | 2627925 | . 15 경상남도 | 3318161 | . 16 제주특별자치도 | 676569 | . city=[&#39;서울특별시&#39;]*10+[&#39;부산광역시&#39;]*10+[&#39;대구광역시&#39;]*10+[&#39;인천광역시&#39;]*10+[&#39;광주광역시&#39;]*10+[&#39;대전광역시&#39;]*10+[&#39;울산광역시&#39;]*10+[&#39;세종특별자치시&#39;]*10+[&#39;경기도&#39;]*10+[&#39;강원도&#39;]*10+[&#39;충청북도&#39;]*10+[&#39;충청남도&#39;]*10+[&#39;전라북도&#39;]*10+[&#39;전라남도&#39;]*10+[&#39;경상북도&#39;]*10+[&#39;경상남도&#39;]*10+[&#39;제주특별자치도&#39;]*10 count=[&#39;9532428&#39;]*10+[&#39;3356311&#39;]*10+[&#39;2390721&#39;]*10+[&#39;2945009&#39;]*10+[&#39;1442454&#39;]*10+[&#39;1454228&#39;]*10+[&#39;1122566&#39;]*10+[&#39;368276&#39;]*10+[&#39;13549577&#39;]*10+[&#39;1537717&#39;]*10+[&#39;1596948&#39;]*10+[&#39;2118977&#39;]*10+[&#39;1789770&#39;]*10+[&#39;1834653&#39;]*10+[&#39;2627925&#39;]*10+[&#39;3318161&#39;]*10+[&#39;676569&#39;]*10 ttotal=pd.DataFrame({&#39;행정구역(시군구)별&#39;:city,&#39;총인구수(명)&#39;:count}) . ttotal . 행정구역(시군구)별 총인구수(명) . 0 서울특별시 | 9532428 | . 1 서울특별시 | 9532428 | . 2 서울특별시 | 9532428 | . 3 서울특별시 | 9532428 | . 4 서울특별시 | 9532428 | . ... ... | ... | . 165 제주특별자치도 | 676569 | . 166 제주특별자치도 | 676569 | . 167 제주특별자치도 | 676569 | . 168 제주특별자치도 | 676569 | . 169 제주특별자치도 | 676569 | . 170 rows × 2 columns . pd.concat([df2,ttotal],axis=1) . month variable value 행정구역(시군구)별 총인구수(명) . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | . ... ... | ... | ... | ... | ... | . 165 2021-06 | 제주 | 234.0 | 제주특별자치도 | 676569 | . 166 2021-07 | 제주 | 468.0 | 제주특별자치도 | 676569 | . 167 2021-08 | 제주 | 870.0 | 제주특별자치도 | 676569 | . 168 2021-09 | 제주 | 273.0 | 제주특별자치도 | 676569 | . 169 2021-10 | 제주 | 225.0 | 제주특별자치도 | 676569 | . 170 rows × 5 columns . problem2_total=pd.concat([df2,ttotal],axis=1) . problem2_total[&quot;value&quot;]=pd.to_numeric(problem2_total[&quot;value&quot;]) problem2_total[&quot;총인구수(명)&quot;]=pd.to_numeric(problem2_total[&quot;총인구수(명)&quot;]) . problem2_total=problem2_total.assign(prob=list(map(lambda x,y: x/y,problem2_total.iloc[:,2] ,problem2_total.iloc[:,4]))) . problem2_total . month variable value 행정구역(시군구)별 총인구수(명) prob . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | 0.000541 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | 0.000428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | 0.000398 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | 0.000609 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | 0.000638 | . ... ... | ... | ... | ... | ... | ... | . 165 2021-06 | 제주 | 234.0 | 제주특별자치도 | 676569 | 0.000346 | . 166 2021-07 | 제주 | 468.0 | 제주특별자치도 | 676569 | 0.000692 | . 167 2021-08 | 제주 | 870.0 | 제주특별자치도 | 676569 | 0.001286 | . 168 2021-09 | 제주 | 273.0 | 제주특별자치도 | 676569 | 0.000404 | . 169 2021-10 | 제주 | 225.0 | 제주특별자치도 | 676569 | 0.000333 | . 170 rows × 6 columns . problem2_total[&quot;prob&quot;]=pd.to_numeric(problem2_total[&quot;prob&quot;]) . problem2_total[&#39;prob&#39;].idxmax() #prob의 22번째 값이 가장 크다. . 8 . problem2_total.head(9) . month variable value 행정구역(시군구)별 총인구수(명) prob . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | 0.000541 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | 0.000428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | 0.000398 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | 0.000609 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | 0.000638 | . 5 2021-06 | 서울 | 6072.0 | 서울특별시 | 9532428 | 0.000637 | . 6 2021-07 | 서울 | 14364.0 | 서울특별시 | 9532428 | 0.001507 | . 7 2021-08 | 서울 | 15001.0 | 서울특별시 | 9532428 | 0.001574 | . 8 2021-09 | 서울 | 21134.0 | 서울특별시 | 9532428 | 0.002217 | . problem2_total[&#39;prob&#39;].max() . 0.002217063690384024 . problem2_total . month variable value 행정구역(시군구)별 총인구수(명) prob . 0 2021-01 | 서울 | 5160.0 | 서울특별시 | 9532428 | 0.000541 | . 1 2021-02 | 서울 | 4080.0 | 서울특별시 | 9532428 | 0.000428 | . 2 2021-03 | 서울 | 3794.0 | 서울특별시 | 9532428 | 0.000398 | . 3 2021-04 | 서울 | 5807.0 | 서울특별시 | 9532428 | 0.000609 | . 4 2021-05 | 서울 | 6078.0 | 서울특별시 | 9532428 | 0.000638 | . ... ... | ... | ... | ... | ... | ... | . 165 2021-06 | 제주 | 234.0 | 제주특별자치도 | 676569 | 0.000346 | . 166 2021-07 | 제주 | 468.0 | 제주특별자치도 | 676569 | 0.000692 | . 167 2021-08 | 제주 | 870.0 | 제주특별자치도 | 676569 | 0.001286 | . 168 2021-09 | 제주 | 273.0 | 제주특별자치도 | 676569 | 0.000404 | . 169 2021-10 | 제주 | 225.0 | 제주특별자치도 | 676569 | 0.000333 | . 170 rows × 6 columns . global_distriction_jsonurl=&#39;https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json&#39; . global_dict = json.loads(requests.get(global_distriction_jsonurl).text) . [global_dict[&#39;features&#39;][i][&#39;properties&#39;][&#39;name&#39;] for i in range(17)] . [&#39;서울특별시&#39;, &#39;부산광역시&#39;, &#39;대구광역시&#39;, &#39;인천광역시&#39;, &#39;광주광역시&#39;, &#39;대전광역시&#39;, &#39;울산광역시&#39;, &#39;세종특별자치시&#39;, &#39;경기도&#39;, &#39;강원도&#39;, &#39;충청북도&#39;, &#39;충청남도&#39;, &#39;전라북도&#39;, &#39;전라남도&#39;, &#39;경상북도&#39;, &#39;경상남도&#39;, &#39;제주특별자치도&#39;] . import plotly.express as px ### plotly 로 시각화 from IPython.display import HTML fig=px.choropleth_mapbox(problem2_total, geojson=global_dict, color=&quot;prob&quot;, locations=&quot;행정구역(시군구)별&quot; , animation_frame=&#39;month&#39;, featureidkey=&quot;properties.name&quot;, center={&quot;lat&quot;: 36, &quot;lon&quot;: 128}, mapbox_style=&quot;carto-positron&quot;, range_color=(0,problem2_total.iloc[:,5].max()), height=1200, zoom=6.5) fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) _html=fig.to_html(include_mathjax=False, config=dict({&#39;scrollZoom&#39;:False})) #HTML(_html) . .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-2%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "relUrl": "/2022/02/19/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-2%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "데이터 시각화 1번 문제",
            "content": "import numpy as np import pandas as pd import warnings from IPython.display import HTML from pandas_datareader import data as pdr import json import folium import json import requests . . covid19=pd.read_html(&#39;https://ncv.kdca.go.kr/mainStatus.es?mid=a11702000000&#39;,encoding=&#39;utf-8&#39;)[1] . covid19 . 구분 1차접종 2차접종 3차(부스터)접종 . 구분 당일 실적 당일 누계 당일 실적 당일 누계 당일 실적 당일 누계 . 0 합계 | 1690 | 42678737 | 1963 | 41341888 | 3650 | 3956401 | . 1 서울 | 346 | 7945695 | 400 | 7723156 | 961 | 731310 | . 2 부산 | 85 | 2727591 | 92 | 2639817 | 157 | 234329 | . 3 대구 | 35 | 1898227 | 36 | 1835971 | 52 | 146256 | . 4 인천 | 142 | 2434931 | 211 | 2356312 | 227 | 203496 | . 5 광주 | 16 | 1191925 | 22 | 1148110 | 53 | 118291 | . 6 대전 | 40 | 1175320 | 28 | 1136378 | 39 | 102857 | . 7 울산 | 16 | 909707 | 20 | 882496 | 27 | 64513 | . 8 세종 | 20 | 272853 | 6 | 262759 | 19 | 24207 | . 9 경기 | 734 | 11173053 | 871 | 10835028 | 1660 | 974644 | . 10 강원 | 22 | 1280951 | 31 | 1240851 | 29 | 130066 | . 11 충북 | 28 | 1353724 | 32 | 1311624 | 72 | 137055 | . 12 충남 | 33 | 1792133 | 62 | 1731542 | 91 | 187208 | . 13 전북 | 37 | 1516390 | 34 | 1465954 | 65 | 175752 | . 14 전남 | 13 | 1577132 | 29 | 1525475 | 41 | 217218 | . 15 경북 | 24 | 2162570 | 26 | 2091760 | 27 | 212036 | . 16 경남 | 66 | 2716019 | 43 | 2623264 | 84 | 249670 | . 17 제주 | 33 | 550516 | 20 | 531391 | 46 | 47493 | . covid19_1=covid19[[&#39;2차접종&#39;]].iloc[1:,1:].reset_index() . covid19_1 . index 2차접종 . 당일 누계 . 0 1 | 7723156 | . 1 2 | 2639817 | . 2 3 | 1835971 | . 3 4 | 2356312 | . 4 5 | 1148110 | . 5 6 | 1136378 | . 6 7 | 882496 | . 7 8 | 262759 | . 8 9 | 10835028 | . 9 10 | 1240851 | . 10 11 | 1311624 | . 11 12 | 1731542 | . 12 13 | 1465954 | . 13 14 | 1525475 | . 14 15 | 2091760 | . 15 16 | 2623264 | . 16 17 | 531391 | . global_distriction_jsonurl=&#39;https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json&#39; . global_dict = json.loads(requests.get(global_distriction_jsonurl).text) . [global_dict[&#39;features&#39;][i][&#39;properties&#39;][&#39;name&#39;] for i in range(17)] . [&#39;서울특별시&#39;, &#39;부산광역시&#39;, &#39;대구광역시&#39;, &#39;인천광역시&#39;, &#39;광주광역시&#39;, &#39;대전광역시&#39;, &#39;울산광역시&#39;, &#39;세종특별자치시&#39;, &#39;경기도&#39;, &#39;강원도&#39;, &#39;충청북도&#39;, &#39;충청남도&#39;, &#39;전라북도&#39;, &#39;전라남도&#39;, &#39;경상북도&#39;, &#39;경상남도&#39;, &#39;제주특별자치도&#39;] . second=pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/2021-11-22-prov.csv&#39;) . second . 행정구역(시군구)별 총인구수 (명) . 0 서울특별시 | 9532428 | . 1 부산광역시 | 3356311 | . 2 대구광역시 | 2390721 | . 3 인천광역시 | 2945009 | . 4 광주광역시 | 1442454 | . 5 대전광역시 | 1454228 | . 6 울산광역시 | 1122566 | . 7 세종특별자치시 | 368276 | . 8 경기도 | 13549577 | . 9 강원도 | 1537717 | . 10 충청북도 | 1596948 | . 11 충청남도 | 2118977 | . 12 전라북도 | 1789770 | . 13 전라남도 | 1834653 | . 14 경상북도 | 2627925 | . 15 경상남도 | 3318161 | . 16 제주특별자치도 | 676569 | . covid19_total=pd.concat([second,covid19_1],axis=1) . covid19_total . 행정구역(시군구)별 총인구수 (명) (index, ) (2차접종, 당일 누계) . 0 서울특별시 | 9532428 | 1 | 7723156 | . 1 부산광역시 | 3356311 | 2 | 2639817 | . 2 대구광역시 | 2390721 | 3 | 1835971 | . 3 인천광역시 | 2945009 | 4 | 2356312 | . 4 광주광역시 | 1442454 | 5 | 1148110 | . 5 대전광역시 | 1454228 | 6 | 1136378 | . 6 울산광역시 | 1122566 | 7 | 882496 | . 7 세종특별자치시 | 368276 | 8 | 262759 | . 8 경기도 | 13549577 | 9 | 10835028 | . 9 강원도 | 1537717 | 10 | 1240851 | . 10 충청북도 | 1596948 | 11 | 1311624 | . 11 충청남도 | 2118977 | 12 | 1731542 | . 12 전라북도 | 1789770 | 13 | 1465954 | . 13 전라남도 | 1834653 | 14 | 1525475 | . 14 경상북도 | 2627925 | 15 | 2091760 | . 15 경상남도 | 3318161 | 16 | 2623264 | . 16 제주특별자치도 | 676569 | 17 | 531391 | . q=covid19_total.iloc[:,1] . q . 0 9532428 1 3356311 2 2390721 3 2945009 4 1442454 5 1454228 6 1122566 7 368276 8 13549577 9 1537717 10 1596948 11 2118977 12 1789770 13 1834653 14 2627925 15 3318161 16 676569 Name: 총인구수 (명), dtype: int64 . w=covid19_total.iloc[:,3] . covid19_total2=covid19_total.assign(prob=list(map(lambda x,y: x/y,covid19_total.iloc[:,3] ,covid19_total.iloc[:,1]))) . covid19_total2.iloc[:,1:] . 총인구수 (명) (index, ) (2차접종, 당일 누계) prob . 0 9532428 | 1 | 7723156 | 0.810198 | . 1 3356311 | 2 | 2639817 | 0.786523 | . 2 2390721 | 3 | 1835971 | 0.767957 | . 3 2945009 | 4 | 2356312 | 0.800103 | . 4 1442454 | 5 | 1148110 | 0.795942 | . 5 1454228 | 6 | 1136378 | 0.781430 | . 6 1122566 | 7 | 882496 | 0.786142 | . 7 368276 | 8 | 262759 | 0.713484 | . 8 13549577 | 9 | 10835028 | 0.799658 | . 9 1537717 | 10 | 1240851 | 0.806944 | . 10 1596948 | 11 | 1311624 | 0.821332 | . 11 2118977 | 12 | 1731542 | 0.817159 | . 12 1789770 | 13 | 1465954 | 0.819074 | . 13 1834653 | 14 | 1525475 | 0.831479 | . 14 2627925 | 15 | 2091760 | 0.795974 | . 15 3318161 | 16 | 2623264 | 0.790578 | . 16 676569 | 17 | 531391 | 0.785420 | . m = folium.Map([35.84195368311022, 127.1155556693179],zoom_start=6,scrollWheelZoom=False) choro= folium.Choropleth( data=covid19_total2, geo_data= global_dict, color=&quot;prob&quot;, columns=[&#39;행정구역(시군구)별&#39;,&#39;prob&#39;], key_on=&#39;feature.properties.name&#39; ) choro.add_to(m) #m . &lt;folium.features.Choropleth at 0x7fdcf195ec40&gt; . .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-1%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "relUrl": "/2022/02/19/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94-1%EB%B2%88%EB%AC%B8%EC%A0%9C.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": "vim&#51032; &#44592;&#52488; . vim을 만들었을 때는 CLI 환경에서 만들었기 때문에 마우스로 드래그나 ctrl +c 와 같은 작업을 할 수 없었다. . vim&#51032; &#47749;&#47161;&#50612; . 터미널을 켜고 vim test.c(저장할 파일명)을 입력하면 vim의 기본모드로 갈 수 있다. . 기본모드에서 i를 입력하여 쓰기모드로 가거나 v를 입력하여 드래그르 할 수 있는 비주얼 모드로 갈 수 있다. 기본모드에서 : 을 입력하고 w를 눌러 엔터를 치는 순간 쓰기모드에서 작업했던 내용을 저장할 수 있다. 기본모드에서 : 을 입력하고 q를 눌러 엔터를 치는 순간 나가진다. 기본모드에서 u를 입력하면 ctrl +z 기능을 사용할 수 있다. 기본모드에서 /를 입력하고 찾고 싶은 내용을 치면 ctrl + f 기능을 사용할 수 있다.쓰기모드에 들어오면 --INSERT--가 화면에 나타난다. 쓰기모드에서 예를 들어 int main(){ return 0; }와 같은 입력을 할 수 있고 쓰기모드에서 esc를 누르면 다시 기본모드로 돌아간다. &#48373;&#49324; &#48143; &#48537;&#50668;&#45347;&#44592; . 코드를 입력한 줄에서 yy를 누르면 yy를 눌렀던 한줄이 복사가 되며 p를 누르면 붙여넣기를 할 수 있다. . 또한 dd를 누르면 잘라내기도 가능하다. . gcc . gcc는 코딩을 하기 위해 알아야 할 하나의 컴파일러이다. . gcc test.c를 입력하면 a.out으로 프로그램이 나오며 gcc -o result test.c를 입력하면 결과의 이름을 result를 저장하고 test.c를 넣는다는 의미이다. . 끝 .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/vim.html",
            "relUrl": "/2022/02/19/vim.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "CLI는 무엇일까?",
            "content": "옛날에는 윈도우의 검은 화면의 흰 글씨 화면에서 컴퓨터를 다루었다. 그것을 CLI(command line interface)라 한다 . 1968년에 최초의 마우스가 나오면서 아이콘을 클릭해서 대상을 옮기거나 웹페이지 서핑이 가능하게 되었다. . 이렇게 GUI(Grapics user interpace)가 발명이 되었다. 하지만 GUI용 프로그램을 바로 코딩을 할 수 없었는데 그 이유는 아직 CLI을 대상으로 하는 프로그램을 짜지 못하였기 때문이다. . CLI &#54532;&#47196;&#44536;&#47016; . windows의 대표적인 CLI프로그램은 Cygwin이 있고 리눅스나 MAC은 terminal을 대표적으로 사용한다. . CLI&#51032; &#47749;&#47161;&#50612;&#47484; &#44036;&#45800;&#54616;&#44172; &#50508;&#50500;&#48372;&#51088; . 1.clear . clear 명령을 사용하면 화면을 깨끗하게 지울 수 있다. . 2.mkdir . mkdir은 make directory의 약자로 폴더를 만드는 명렁어이다. mkdir chanwoo를 입력하면 chanwoo라는 폴더가 생성된다. . 3.touch . touch는 파일을 만드는 명령어이다. touch hi.c를 입력하면 hi.c파일이 생성된다. . 4. rm . rm은 remove의 약자로 파일을 삭제하는 명령어이다. rm hi.c를 입력하면 hi.c 파일이 삭제된다. . 5. rm -r . rm -r은 폴더를 삭제하는 명령어이다. rm -r chanwoo를 입력하면 chanwoo라는 폴더가 삭제된다. . 참고로 rm -rf를 입력하면 폴더안에 파일이 너무 많을 때 강제로 폴더를 지울 수 있다. . 6. ls . ls는 list의 약자로 ls 명령어를 사용하면 현제 디렉토리에 있는 폴더의 이름이나 파일의 이름을 알 수 있다. . 6.1 ls -l . list 형식으로 현제 디렉토리에 있는 폴더의 이름이나 파일의 이름을 알 수 있으며 각각의 파일이나 폴더가 언제 만들었는지도 알 수 있다. . 6.2 ls -a . ls -a를 명령어를 입력하면 숨김 파일도 볼 수 있으며 .은 자기 자신을 의미하고 ..은 자신의 상위 디렉토리를 의미한다. . 7. cd . cd는 change directory의 약자로 cd chanwoo를 입력하면 chanwoo 폴더에 들어갈 수 있다. cd ..을 입력하면 자신의 상위 디렉토리로 이동할 수 있다. .",
            "url": "https://chanwoo2307.github.io/green/2022/02/19/CLI.html",
            "relUrl": "/2022/02/19/CLI.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "더하기",
            "content": "1+1 . 2 . 2+2 . 4 . 2+1 . 3 .",
            "url": "https://chanwoo2307.github.io/green/2022/02/12/%EB%8D%94%ED%95%98%EA%B8%B0.html",
            "relUrl": "/2022/02/12/%EB%8D%94%ED%95%98%EA%B8%B0.html",
            "date": " • Feb 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Title",
            "content": "matplotlib&#47196; (&#51652;&#51676; &#50612;&#47157;&#44172;) &#44536;&#47548;&#51012; &#44536;&#47532;&#45716; &#48169;&#48277; . &#50640;&#51228;1: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54620; &#54540;&#46991; . - 목표: plt.plot() 을 사용하지 않고 아래 그림을 그려보자. . import matplotlib.pyplot as plt plt.plot([1,2,3],&#39;or&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fbe36af0&gt;] . - 구조: axis $ subset$ axes $ subset$ figure . https://matplotlib.org/stable/gallery/showcase/anatomy.html#sphx-glr-gallery-showcase-anatomy-py | . - 전략: 그림을 만들고 (도화지를 준비) $ to$ 액시즈를 만들고 (네모틀을 만든다) $ to$ 액시즈에 그림을 그린다. (.plot()을 이용) . - 우선 그림객체를 생성한다. . fig = plt.figure() # 도화지를 준비한다. . &lt;Figure size 432x288 with 0 Axes&gt; . fig # 현재 도화지상태를 체크 . &lt;Figure size 432x288 with 0 Axes&gt; . 그림객체를 출력해봐야 아무것도 나오지 않는다. (아무것도 없으니까..) | . fig.add_axes() ## 액시즈를 fig에 추가하라. fig.axes ## 현재 fig에 있는 액시즈 정보 . fig.axes # 현재 네모틀 상태를 체크 . [] . fig.add_axes([0,0,1,1]) # 도화지안에 (0,0) 위치에 길이가 (1,1) 인 네모틀을 만든다. . &lt;Axes:&gt; . fig.axes # 현재 네모틀 상태를 체크 --&gt; 네모틀이 하나 있음. . [&lt;Axes:&gt;] . fig # 현재도화지 상태 체크 --&gt; 도화지에 (하나의) 네모틀이 잘 들어가 있음 . axs1=fig.axes[0] ## 첫번째 액시즈 . axs1.plot([1,2,3],&#39;or&#39;) # 첫번쨰 액시즈에 접근하여 그림을 그림 . [&lt;matplotlib.lines.Line2D at 0x7ff0fc072070&gt;] . fig #현재 도화지 상태 체크 --&gt; 그림이 잘 그려짐 . &#50696;&#51228;2: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54620; &#49436;&#48652;&#54540;&#46991; (&#48169;&#48277;1) . - 목표: subplot . fig # 현재 도화지 출력 . - 액시즈추가 . fig.add_axes([1,0,1,1]) . &lt;Axes:&gt; . fig.axes . [&lt;Axes:&gt;, &lt;Axes:&gt;] . fig . axs2=fig.axes[1] ## 두번째 액시즈 . - 두번째 액시즈에 그림그림 . axs2.plot([1,2,3],&#39;ok&#39;) ## 두번째 액시즈에 그림그림 . [&lt;matplotlib.lines.Line2D at 0x7ff0fc0846d0&gt;] . fig ## 현재 도화지 체크 . - 첫번째 액시즈에 그림추가 . axs1.plot([1,2,3],&#39;--&#39;) ### 액시즈1에 점선추가 . [&lt;matplotlib.lines.Line2D at 0x7ff0fc084fa0&gt;] . fig ## 현재 도화지 체크 . &#50696;&#51228;3: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54616;&#50668; &#49436;&#48652;&#54540;&#46991; (&#48169;&#48277;2) . - 예제2의 레이아웃이 좀 아쉽다. . - 다시 그려보자. . fig = plt.figure() . &lt;Figure size 432x288 with 0 Axes&gt; . fig.axes . [] . fig.subplots(1,2) . array([&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;], dtype=object) . fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . ax1,ax2 = fig.axes . ax1.plot([1,2,3],&#39;or&#39;) ax2.plot([1,2,3],&#39;ob&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fc072190&gt;] . fig . 그림이 좀 좁은것 같다. (도화지를 늘려보자) | . fig.set_figwidth(10) . fig . ax1.plot([1,2,3],&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fb906d60&gt;] . fig . &#50696;&#51228;4: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54616;&#50668; 2$ times$2 &#49436;&#48652;&#54540;&#46991; &#44536;&#47532;&#44592; . fig = plt.figure() fig.axes . [] . &lt;Figure size 432x288 with 0 Axes&gt; . fig.subplots(2,2) fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . ax1,ax2,ax3,ax4=fig.axes . ax1.plot([1,2,3],&#39;ob&#39;) ax2.plot([1,2,3],&#39;or&#39;) ax3.plot([1,2,3],&#39;ok&#39;) ax4.plot([1,2,3],&#39;oy&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fb177430&gt;] . fig . &#50696;&#51228;5: plt.subplots()&#47484; &#51060;&#50857;&#54616;&#50668; 2$ times$2 &#49436;&#48652;&#54540;&#46991; (&#48373;&#49845;) . x=[1,2,3,4] y=[1,2,4,3] _, axs = plt.subplots(2,2) axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;Xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fac18dc0&gt;] . - 단계적으로 코드를 실행하고 싶을때 . x=[1,2,3,4] y=[1,2,4,3] . _, axs = plt.subplots(2,2) . axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;Xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0faaa0940&gt;] . 어? 그림을 볼려면 어떻게 하지? | . _ . 이렇게 하면된다. | . - 단계적으로 그림을 그릴경우에는 도화지객체를 fig라는 변수로 명시하여 받는것이 가독성이 좋다. . x=[1,2,3,4] y=[1,2,4,3] . fig, axs = plt.subplots(2,2) . axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;Xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fa935160&gt;] . fig # 현재 도화지 확인 . &#50696;&#51228;6: plt.subplots()&#47484; 2$ times$2 subplot &#44536;&#47532;&#44592; -- &#50529;&#49884;&#51592;&#47484; &#44033;&#44033; &#48320;&#49688;&#47749;&#51004;&#47196; &#51200;&#51109; . x=[1,2,3,4] y=[1,2,4,3] fig, axs = plt.subplots(2,2) . ax1,ax2,ax3,ax4 =axs . ValueError Traceback (most recent call last) /tmp/ipykernel_1794991/648347195.py in &lt;module&gt; -&gt; 1 ax1,ax2,ax3,ax4 =axs ValueError: not enough values to unpack (expected 4, got 2) . (ax1,ax2), (ax3,ax4) = axs . ax1.plot(x,y,&#39;o:r&#39;) ax2.plot(x,y,&#39;Xb&#39;) ax3.plot(x,y,&#39;xm&#39;) ax4.plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fb3650d0&gt;] . fig . &#50696;&#51228;7: plt.subplots()&#47484; &#51060;&#50857;&#54616;&#50668; 2$ times$2 &#49436;&#48652;&#54540;&#46991; &#44536;&#47532;&#44592; -- fig.axes&#50640;&#49436; &#51217;&#44540;! . fig, _ = plt.subplots(2,2) . fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . ax1, ax2, ax3, ax4= fig.axes . ax1.plot(x,y,&#39;o:r&#39;) ax2.plot(x,y,&#39;Xb&#39;) ax3.plot(x,y,&#39;xm&#39;) ax4.plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0faddc670&gt;] . fig . - 예제7, 예제4와 비교해볼것: 거의 비슷함 . - matplotlib은 그래프를 쉽게 그릴수도 있지만 어렵게 그릴수도 있다. . - 오브젝트를 컨트르로 하기 어려우므로 여러가지 축약버전이 존재함. . 사실 그래서 서브플랏을 그리는 방법 1,2,3... 와 같은 식으로 정리하여 암기하기에는 무리가 있다. | . - 원리를 꺠우치면 다양한 방법을 자유자재로 쓸 수 있음. (자유도가 높음) . &#51228;&#47785;&#49444;&#51221; . &#50696;&#51228;1: plt.plot() . x=[1,2,3] y=[1,2,2] . plt.plot(x,y) plt.title(&#39;title&#39;) . Text(0.5, 1.0, &#39;title&#39;) . &#50696;&#51228;2: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857; . fig = plt.figure() fig.subplots() . &lt;AxesSubplot:&gt; . ax1=fig.axes[0] . ax1.set_title(&#39;title&#39;) . Text(0.5, 1.0, &#39;title&#39;) . fig . - 문법을 잘 이해했으면 각 서브플랏의 제목을 설정하는 방법도 쉽게 알 수 있다. . &#50696;&#51228;3: subplot&#50640;&#49436; &#44033;&#44033;&#51032; &#51228;&#47785;&#49444;&#51221; . fig, ax = plt.subplots(2,2) . (ax1,ax2),(ax3,ax4) =ax . ax1.set_title(&#39;title1&#39;) ax2.set_title(&#39;title2&#39;) ax3.set_title(&#39;title3&#39;) ax4.set_title(&#39;title4&#39;) . Text(0.5, 1.0, &#39;title4&#39;) . fig . - 보기싫음 $ to$ 서브플랏의 레이아웃 재정렬 . fig.tight_layout() # 외우세요.. . &#50696;&#51228;4: &#50529;&#49884;&#51592;&#51032; &#51228;&#47785; + Figure&#51228;&#47785; . fig.suptitle(&#39;sup title&#39;) . Text(0.5, 0.98, &#39;sup title&#39;) . fig . fig.tight_layout() . fig . &#52629;&#48276;&#50948;&#49444;&#51221; . &#50696;&#51228;1 . x=[1,2,3] y=[4,5,6] . plt.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fa3e0f40&gt;] . plt.plot(x,y,&#39;o&#39;) plt.xlim(-1,5) plt.ylim(3,7) . (3.0, 7.0) . &#50696;&#51228;2 . fig = plt.figure() fig.subplots() . &lt;AxesSubplot:&gt; . ax1=fig.axes[0] . import numpy as np . ax1.plot(np.random.normal(size=100),&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fa2b4d60&gt;] . fig . ax1.set_xlim(-10,110) ax1.set_ylim(-5,5) . (-5.0, 5.0) . fig . &#53685;&#44228;&#50696;&#51228; . - 여러가지 경우의 산점도와 표본상관계수 . &#50696;&#51228;1 . np.random.seed(43052) x1=np.linspace(-1,1,100,endpoint=True) y1=x1**2+np.random.normal(scale=0.1,size=100) . plt.plot(x1,y1,&#39;o&#39;) plt.title(&#39;y=x**2&#39;) . Text(0.5, 1.0, &#39;y=x**2&#39;) . np.corrcoef(x1,y1) . array([[1. , 0.00688718], [0.00688718, 1. ]]) . - (표본)상관계수의 값이 0에 가까운 것은 두 변수의 직선관계가 약한것을 의미한 것이지 두 변수 사이에 아무런 함수관계가 없다는 것을 의미하는 것은 아니다. . &#50696;&#51228;2 . - 아래와 같은 자료를 고려하자. . np.random.seed(43052) x2=np.random.uniform(low=-1,high=1,size=100000) y2=np.random.uniform(low=-1,high=1,size=100000) . plt.plot(x2,y2,&#39;.&#39;) plt.title(&#39;rect&#39;) . Text(0.5, 1.0, &#39;rect&#39;) . np.corrcoef(x2,y2) . array([[1. , 0.00521001], [0.00521001, 1. ]]) . &#50696;&#51228;3 . np.random.seed(43052) _x3=np.random.uniform(low=-1,high=1,size=100000) _y3=np.random.uniform(low=-1,high=1,size=100000) . plt.plot(_x3,_y3,&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0fadd4760&gt;] . radius = _x3**2+_y3**2 . x3=_x3[radius&lt;1] y3=_y3[radius&lt;1] plt.plot(_x3,_y3,&#39;.&#39;) plt.plot(x3,y3,&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0faf53730&gt;] . plt.plot(x3,y3,&#39;.&#39;) plt.title(&#39;circ&#39;) . Text(0.5, 1.0, &#39;circ&#39;) . np.corrcoef(x3,y3) . array([[ 1. , -0.00362687], [-0.00362687, 1. ]]) . &#49689;&#51228;: . - 예제1,2,3 을 하나의 figure안에 subplot 으로 그려보기 (1$ times$3 행렬처럼 그릴것) . &#50696;&#51228;2~3&#51004;&#47196; &#50508;&#50500;&#48372;&#45716; &#46160; &#48320;&#49688;&#51032; &#46021;&#47549;&#49457; . - 예제2,3에 대하여 아래와 같은 절차를 고려하여 보자. . (1) $X in [-h,h]$일 경우 $Y$의 분포를 생각해보자. 그리고 히스토그램을 그려보자. . (2) $X in [0.9-h,0.9+h]$일 경우 $Y$의 분포를 생각해보자. 그리고 히스토그램을 그려보자. . (3) (1)-(2)를 비교해보자. . - 그림으로 살펴보자. . h=0.05 plt.hist(y2[(x2&gt; -h )*(x2&lt; h )]) . (array([508., 527., 450., 512., 500., 521., 500., 515., 494., 506.]), array([-9.99973293e-01, -7.99983163e-01, -5.99993034e-01, -4.00002904e-01, -2.00012774e-01, -2.26437887e-05, 1.99967486e-01, 3.99957616e-01, 5.99947746e-01, 7.99937876e-01, 9.99928006e-01]), &lt;BarContainer object of 10 artists&gt;) . h=0.05 _,axs= plt.subplots(2,2) axs[0,0].hist(y2[(x2&gt; -h )*(x2&lt; h )]) axs[0,1].hist(y2[(x2&gt; 0.9-h )*(x2&lt; 0.9+h )]) axs[1,0].hist(y3[(x3&gt; -h )*(x3&lt; h )]) axs[1,1].hist(y3[(x3&gt; 0.9-h )*(x3&lt; 0.9+h )]) . (array([105., 194., 256., 259., 262., 270., 244., 245., 188., 64.]), array([-0.5171188 , -0.41349885, -0.30987891, -0.20625896, -0.10263902, 0.00098093, 0.10460087, 0.20822082, 0.31184076, 0.41546071, 0.51908066]), &lt;BarContainer object of 10 artists&gt;) . - 축의범위를 조절하여보자. . h=0.05 _,axs= plt.subplots(2,2) axs[0,0].hist(y2[(x2&gt; -h )*(x2&lt; h )]) axs[0,0].set_xlim(-1.1,1.1) axs[0,1].hist(y2[(x2&gt; 0.9-h )*(x2&lt; 0.9+h )]) axs[0,1].set_xlim(-1.1,1.1) axs[1,0].hist(y3[(x3&gt; -h )*(x3&lt; h )]) axs[1,0].set_xlim(-1.1,1.1) axs[1,1].hist(y3[(x3&gt; 0.9-h )*(x3&lt; 0.9+h )]) axs[1,1].set_xlim(-1.1,1.1) . (-1.1, 1.1) . &#50696;&#51228;4 . np.random.seed(43052) x4=np.random.normal(size=10000) y4=np.random.normal(size=10000) . plt.plot(x4,y4,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0f36d0b20&gt;] . plt.plot(x4,y4,&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7ff0f3649400&gt;] . - 디자인적인 측면에서 보면 올바른 시각화라 볼 수 없다. (이 그림이 밀도를 왜곡시킨다) . - 아래와 같은 그림이 더 우수하다. (밀도를 표현하기 위해 투명도라는 개념을 도입) . plt.scatter(x4,y4,alpha=0.01) . &lt;matplotlib.collections.PathCollection at 0x7ff0f352d610&gt; . np.corrcoef(x4,y4) . array([[ 1. , -0.01007718], [-0.01007718, 1. ]]) . h=0.05 fig, _ = plt.subplots(3,3) . fig.tight_layout() . fig . fig.set_figwidth(10) fig.set_figheight(10) fig . fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . k=np.linspace(-2,2,9) k . array([-2. , -1.5, -1. , -0.5, 0. , 0.5, 1. , 1.5, 2. ]) . h . 0.05 . h=0.2 for i in range(9): fig.axes[i].hist(y4[(x4&gt;k[i]-h) * (x4&lt;k[i]+h)]) . fig . &#49689;&#51228; . plt.scatter(x4,y4,alpha=0.01) . &lt;matplotlib.collections.PathCollection at 0x7ff0f30f1a60&gt; . - 이 그림의 색깔을 붉은색으로 바꿔서 그려보자. (주의: 수업시간에 알려주지 않은 방법임) . plt.scatter(x4,y4,alpha=0.01,&#39;r&#39;) . File &#34;/tmp/ipykernel_1794991/399356376.py&#34;, line 1 plt.scatter(x4,y4,alpha=0.01,&#39;r&#39;) ^ SyntaxError: positional argument follows keyword argument .",
            "url": "https://chanwoo2307.github.io/green/2021/09/27/(3%EC%A3%BC%EC%B0%A8)_9%EC%9B%9427%EC%9D%BC.html",
            "relUrl": "/2021/09/27/(3%E1%84%8C%E1%85%AE%E1%84%8E%E1%85%A1)_9%E1%84%8B%E1%85%AF%E1%86%AF27%E1%84%8B%E1%85%B5%E1%86%AF.html",
            "date": " • Sep 27, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chanwoo2307.github.io/green/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "An Example Markdown Post",
            "content": "내용 1 . ㅁㄴㅇㄹ . 내용 2 . ㅁㄴㅇㄹ .",
            "url": "https://chanwoo2307.github.io/green/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "수상 . ’-‘ 빅데이터 동계 캠프 AWS DeepRacer . 프로그래밍 스킬 . ’-‘ R . ’-‘ 파이썬 . ’-‘ C . ’-‘ C++ . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chanwoo2307.github.io/green/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chanwoo2307.github.io/green/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}